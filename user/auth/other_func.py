from datetime import date, datetime
from typing import List, Dict

from PIL import Image
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram_dialog import DialogManager, Window, Dialog
from aiogram_dialog.widgets.kbd import Calendar
from aiogram_dialog.widgets.text import Const

from db.database import get_reg_translation
from user.auth.keyboards import SUBMIT_CALLBACK, BACK_CALLBACK
from user.auth.states import AbsenceCal, AbsenceFlow

LOC_HUMAN = {
    "lectures": "–õ–µ–∫—Ü–∏–∏",
    "foreign_lang": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
    "russian_lang": "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
    "events": "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
    "work": "–†–∞–±–æ—Ç–∞",
}

REASON_HUMAN = {
    "illness": "–ë–æ–ª–µ–∑–Ω—å",
    "family": "–°–µ–º–µ–π–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞",
    "vacation": "–û—Ç–ø—É—Å–∫",
    "other": "–î—Ä—É–≥–æ–µ",
}


def create_collage(images: List[Image.Image], cols: int, rows: int) -> Image.Image:
    """
    –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–∞–∂ –∏–∑ —Å–ø–∏—Å–∫–∞ PIL-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –°–µ—Ç–∫–∞ cols√órows.
    –ö–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:
      - –ü–æ–¥–≥–æ–Ω—è–µ–º —á–µ—Ä–µ–∑ thumbnail(...) –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–π.
      - –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –≤ —è—á–µ–π–∫–µ (–Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ).
    """
    thumb_w, thumb_h = 400, 400
    collage_w = cols * thumb_w
    collage_h = rows * thumb_h

    # –ë–µ–ª—ã–π —Ñ–æ–Ω
    collage = Image.new('RGB', (collage_w, collage_h), (255, 255, 255))

    idx = 0
    for r in range(rows):
        for c in range(cols):
            if idx < len(images):
                img = images[idx]
                img.thumbnail((thumb_w, thumb_h), Image.Resampling.LANCZOS)

                # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ—Ä—Ö–Ω–µ–≥–æ –ª–µ–≤–æ–≥–æ —É–≥–ª–∞ —è—á–µ–π–∫–∏
                x = c * thumb_w
                y = r * thumb_h

                # –ß—Ç–æ–±—ã —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —ç—Ç–æ–π —è—á–µ–π–∫–µ:
                offset_x = x + (thumb_w - img.width) // 2
                offset_y = y + (thumb_h - img.height) // 2

                collage.paste(img, (offset_x, offset_y))
                idx += 1
    return collage


async def on_start_selected(
        c: CallbackQuery, widget: Calendar, manager: DialogManager, selected_date: date):
    manager.dialog_data["start"] = selected_date  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    await manager.switch_to(AbsenceCal.End)


async def on_end_selected(
        c: CallbackQuery, widget: Calendar, manager: DialogManager, selected_date: date):
    # –≤–Ω–µ—à–Ω–∏–π FSM, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —á–µ—Ä–µ–∑ data
    absence_fsm: FSMContext = manager.start_data["parent_fsm"]

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—ã –≤ FSM –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è
    start_day = manager.dialog_data.get("start")
    await absence_fsm.update_data(dates={
        "start": str(start_day),
        "end": str(selected_date)
    })

    # —Å–æ–±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    data = await absence_fsm.get_data()
    human_loc = ", ".join(LOC_HUMAN.get(l, l) for l in data.get("locations", [])) or "‚Äî"
    reason_code = data.get("reason_code")
    human_reason = REASON_HUMAN.get(reason_code, "‚Äî")

    dates_str = f"—Å {start_day.strftime('%d.%m.%Y')} –¥–æ {selected_date.strftime('%d.%m.%Y')}"
    comment = data.get("add_comment") or "‚Äî"

    text = (
        "üîé <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:</b>\n\n"
        f"<b>–ú–µ—Å—Ç–æ(–∞):</b> {human_loc}\n"
        f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {human_reason}\n"
        f"<b>–ü–µ—Ä–∏–æ–¥:</b> {dates_str}\n"
        f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}\n"
        "<b>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:</b>"
    )

    # –ø–µ—Ä–µ–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π FSM –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await absence_fsm.set_state(AbsenceFlow.ConfirmingDetails)
    await manager.done()  # –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥‚Äë–∫–∞–ª–µ–Ω–¥–∞—Ä—å

    await c.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=SUBMIT_CALLBACK)],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=BACK_CALLBACK)],
        ]),
        parse_mode="HTML"
    )
    files = data.get("files", [])
    preview_ids: list[int] = []
    for ftype, file_id, filename in files:
        if ftype == "doc":
            sent = await c.message.answer_document(file_id, caption=filename or "")
        else:  # photo
            sent = await c.message.answer_photo(file_id)
        preview_ids.append(sent.message_id)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º id –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å
    await absence_fsm.update_data(preview_msg_ids=preview_ids)


start_win = Window(
    Const("üóì –í—ã–±–µ—Ä–∏—Ç–µ <b>–¥–µ–Ω—å –Ω–∞—á–∞–ª–∞</b> –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è:"),
    Calendar(id="start_cal", on_click=on_start_selected),
    state=AbsenceCal.Start,
    parse_mode="HTML"
)

end_win = Window(
    Const("üóì –í—ã–±–µ—Ä–∏—Ç–µ <b>–¥–µ–Ω—å –æ–∫–æ–Ω—á–∞–Ω–∏—è</b> –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è:"),
    Calendar(id="end_cal", on_click=on_end_selected),
    state=AbsenceCal.End,
    parse_mode="HTML"
)

absence_calendar_dialog = Dialog(start_win, end_win)


def build_user_card_text(card: Dict[str, any]) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç caption –¥–ª—è —É—á–∞—Å—Ç–Ω–∏—Ü—ã. –ù–∏ –ë–î, –Ω–∏ Telegram –∑–¥–µ—Å—å –Ω–µ —Ç—Ä–æ–≥–∞–µ–º ‚Äî
    —Ç–æ–ª—å–∫–æ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ HTML-—Ç–µ–∫—Å—Ç.
    """
    program_name = card.get("program", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    status = card.get("status", "")
    # –¥–µ—Ñ–æ–ª—Ç—ã -- –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–æ–∫ –Ω–µ—Ç –≤ SELECT
    card.setdefault("current_doop", "N/A")
    card.setdefault("minor_violations", "0")
    card.setdefault("medium_violations", "0")
    card.setdefault("serious_violations", "0")
    card.setdefault("commendations_count", "0")
    card.setdefault("commendation_reason", "–ù–µ—Ç")

    lines: List[str] = [
        f"<b>–§–ò–û:</b> {card.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
        f"<b>–ü—Ä–æ–≥—Ä–∞–º–º–∞:</b> {program_name}",
        f"<b>–°—Ç—Ä–∞–Ω–∞:</b> {card.get('country', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
        f"<b>–¢–∏–∫:</b> {card.get('tik', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {status if status else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}",
        f"<b>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b> {card.get('department', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
        f"<b>–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã:</b> {card.get('workplace', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
        f"<b>–ú–æ–¥—É–ª—å:</b> {card.get('module', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
        f"<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {card.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
        f"<b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> {card.get('supervisor_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
        "\n<b>–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥:</b>",
        f"  –ö–æ—ç—Ñ—Ñ. —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {card.get('efficiency_coefficient', 'N/A')}%",
    ]

    if "–º–∏—Ä" in program_name.lower():
        lines += [
            f"  –°—Ä–µ–¥–Ω–∏–π KPI: {card.get('average_kpi', 'N/A')}%",
            f"  –°—Ä–µ–¥–Ω–∏–π –†—É—Å—Å. —è–∑: {card.get('average_russian_score', 'N/A')}%",
        ]

    lines += [
        f"  –°—Ä–µ–¥–Ω–∏–π –ò–Ω—Ç.–ü.: {card.get('average_int_p', 'N/A')}%",
        f"  –¢–µ–∫—É—â–∏–π –î–û–û–ü: {card.get('current_doop')}%",
    ]

    if "–º–∏—Ä" in program_name.lower():
        lines.append(f"  AS: {card.get('as_score', 'N/A')}")

    lines += [
        f"  BCats: {card.get('bcats', 'N/A')}",
        f"  –ó–ö–ê: {card.get('zka', 'N/A')}",
        f"  –ó–ö–û: {card.get('zko', 'N/A')}",
        f"\n<b>–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: ({card.get('discipline_score', 'N/A')})</b>",
        f"  –õ—ë–≥–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è: {card.get('minor_violations')}",
        f"  –°—Ä–µ–¥–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è: {card.get('medium_violations')}",
        f"  –¢—è–∂—ë–ª—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è: {card.get('serious_violations')}",
        f"  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {card.get('discipline_comment')}",
        f"\n<b>–ü–æ–æ—â—Ä–µ–Ω–∏—è:</b> {card.get('encouragement_score')}",
        f"  <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {card.get('encouragement_comment')}",
    ]
    try:
        if ("–∏—Å–∫–ª—é—á–µ–Ω–∞" or "—É–≤–æ–ª–µ–Ω–∞") in status.lower():
            lines.append(
                f"\n‚ö†Ô∏è <b>–ü—Ä–∏—á–∏–Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è:</b> {card.get('exclusion_reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"
            )
    except:
        pass

    return "\n".join(lines)


def is_event_open(ev: dict) -> bool:
    """
    –°–æ–±—ã—Ç–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ, –µ—Å–ª–∏:
      ‚Ä¢ status='active'
      ‚Ä¢ –¥–µ–¥–ª–∞–π–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ò–õ–ò –µ—â—ë –Ω–µ –ø—Ä–æ—à—ë–ª
    """
    if ev["status"] != "active":
        return False
    dl = ev["report_deadline"]
    if not dl:
        return True
    try:
        return datetime.now() <= datetime.strptime(dl, "%Y-%m-%d %H:%M:%S")
    except ValueError:
        return False


def trp(key: str, **kwargs) -> str:
    """
    –ê–Ω–∞–ª–æ–≥ tr(...) –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ó–¥–µ—Å—å –Ω–µ –±–µ—Ä—É—Ç—Å—è –≤–æ –≤–Ω–∏–º–∞–Ω–∏–µ —è–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —è–∑—ã–∫).
    """
    text_template = get_reg_translation(key)
    try:
        return text_template.format(**kwargs)
    except Exception:
        # –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω .format(**kwargs) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–º–µ–Ω—ë–Ω ‚Äî –≤–µ—Ä–Ω—É—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        return text_template


