"""
handlers_commented.py  ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–±–æ—Ä —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ (aiogram) –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è
—Ñ–∏–∫—Å–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏—Ü.

–í —Ñ–∞–π–ª–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤—Å–µ —à–∞–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞:
    1. –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ inline‚Äë—Ä–µ–∂–∏–º               (VioFSM.FindUser)
    2. –ü–æ–∫–∞–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ + –≤—ã–±–æ—Ä —Ü–∏–∫–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)         (CardShort / CardFull)
    3. –í—ã–±–æ—Ä —Ç—è–∂–µ—Å—Ç–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è                          (ChooseSeverity)
    4. –í—ã–±–æ—Ä —Ç–∏–ø–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –∏–ª–∏ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è  (ChooseTemplate / CustomDescr)
    5. –í—ã–±–æ—Ä –¥–∞—Ç—ã –Ω–∞—Ä—É—à–µ–Ω–∏—è                             (ChooseDate)
    6. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞‚Äë–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è                     (WaitingFile)
    7. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö                             (Confirm)
    8. –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –ë–î + —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞        (vio_save)

–°—Ç—Ä—É–∫—Ç—É—Ä–∞
---------
–§–∞–π–ª –ø–æ–¥–µ–ª–µ–Ω –Ω–∞ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏, –∫–∞–∂–¥—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å
–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤–∏–¥–∞ ¬´‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‚Ä¶ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬ª.

–í–∞–∂–Ω–æ:
    ‚Ä¢ –í—Å–µ callback‚Äë–¥–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç –ø—Ä–µ—Ñ–∏–∫—Å `vio_`, —á—Ç–æ –æ–±–ª–µ–≥—á–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é.
    ‚Ä¢ –ö–∞–∂–¥–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM —á—ë—Ç–∫–æ –æ–±–æ–∑–Ω–∞—á–µ–Ω–æ –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞—Ö aiogram.
    ‚Ä¢ –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –∏–∑–±–µ–≥–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      –∏—Å–ø–æ–ª—å–∑—É–µ–º id —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (`gmsgid` –≤ FSM‚Äë–¥–∞–Ω–Ω—ã—Ö).

–°–æ–≤–µ—Ç—ã –ø–æ –¥–æ—Ä–∞–±–æ—Ç–∫–µ
-------------------
    ‚Ä¢ –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ç—è–∂–µ—Å—Ç–µ–π –Ω–∞—Ä—É—à–µ–Ω–∏–π –æ–±–Ω–æ–≤–∏—Ç–µ `SEV_RU` –∏ —à–∞–±–ª–æ–Ω—ã
      –≤ Excel‚Äë—Ñ–∞–π–ª–µ `violations.xlsx`.
    ‚Ä¢ –ß—Ç–æ–±—ã —Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª—ã –ª–æ–∫–∞–ª—å–Ω–æ, –≤–º–µ—Å—Ç–æ file_id –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —á–µ—Ä–µ–∑
      `bot.get_file` + `bot.download_file`. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –∫–æ–ª–æ–Ω–∫—É
      `file_path` –≤ —Ç–∞–±–ª–∏—Ü–µ `user_documents` –Ω—É–∂–Ω–æ —Ç—Ä–∞–∫—Ç–æ–≤–∞—Ç—å –∫–∞–∫ –ø—É—Ç—å.

–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥—ë–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å.
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä—è–º–æ –≤ –∫–æ–¥–µ (–ø–æ–∏—Å–∫ –ø–æ ¬´# üóØÔ∏è¬ª).
"""

from aiogram import F, types
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from datetime import datetime

from aiogram.types import InputTextMessageContent, InlineQueryResultArticle, InputMediaPhoto
from aiogram_dialog import DialogManager, StartMode

from admins.filters.is_admin import IsAdmin
from admins.superadmin.violations.states import VioFSM, ViolCal
from admins.superadmin.violations.keyboards import *
from admins.utils import build_admin_card_text
from db.database import cursor, conn, search_users_by_fio, get_participant_card, get_photo_or_none
from config import dp, bot

SEV_RU = {"light": "–õ—ë–≥–∫–æ–µ", "medium": "–°—Ä–µ–¥–Ω–µ–µ", "heavy": "–¢—è–∂—ë–ª–æ–µ"}


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏—Ü—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _normalize(text: str) -> str:
    import re
    text = re.sub(r"\s+", " ", text.strip())
    return "%" + "%".join(text.split(" ")) + "%"


@dp.callback_query(F.data == "sa_violations", IsAdmin())
async def vio_entry(cb: types.CallbackQuery, state: FSMContext):
    await state.set_state(VioFSM.FindUser)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏—Ü—É",
                                  switch_inline_query_current_chat="vu: ")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="a_menu")]
        ]
    )
    # ‚ÄºÔ∏è —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º –ø–æ—Ç–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    await state.update_data(gmsgid=cb.message.message_id)

    await cb.message.edit_text("–ù–∞–∂–º–∏—Ç–µ ¬´üîç –ù–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏—Ü—É¬ª –∏ –Ω–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –§–ò–û/username/—Ä–æ–ª—å:",
                               reply_markup=kb)
    await cb.answer()


@dp.inline_query(VioFSM.FindUser, IsAdmin())
async def vio_inline_search(query: types.InlineQuery, state: FSMContext):
    text = query.query.strip()
    if text.lower().startswith("vu:"):
        text = text[3:].lstrip()

    if len(text) < 2:
        return await query.answer([], cache_time=1)

    users = search_users_by_fio(text, 25)
    results = [
        InlineQueryResultArticle(
            id=str(u.get("id")),
            title=u.get("full_name"),
            description=f"–¢–∏–∫: {u.get("tik") or '‚Äî'}",
            input_message_content=InputTextMessageContent(
                message_text=f"#VU{u.get("id")}"
            )
        )
        for u in users
    ]
    await query.answer(results, cache_time=1)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤—ã–±—Ä–∞–Ω #VU<ID> ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message(VioFSM.FindUser, F.text.startswith("#VU"), IsAdmin())
async def vio_user_selected(msg: types.Message, state: FSMContext):
    try:
        uid = int(msg.text[3:])
    except ValueError:
        return

    # –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–∏–∫–ª—ã
    cursor.execute("""
        SELECT full_name, username
          FROM users
         WHERE user_id = ?
    """, (uid,))
    row = cursor.fetchone()
    if not row:
        await msg.reply("‚ùóÔ∏è –£—á–∞—Å—Ç–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    card = get_participant_card(uid)
    caption = build_admin_card_text(card)
    kb = main_card_kb(uid)
    photo = get_photo_or_none(card)
    data = await state.get_data()

    if photo:  # ---------- —Ñ–æ—Ç–æ –µ—Å—Ç—å ----------
        try:
            await bot.edit_message_media(
                chat_id=msg.chat.id,
                message_id=data.get("gmsgid"),
                media=InputMediaPhoto(media=photo, caption=caption, parse_mode="HTML"),
                reply_markup=kb
            )
        except Exception:
            # –µ—Å–ª–∏ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –±–µ–∑ —Ñ–æ—Ç–æ ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await msg.delete()
            await msg.answer_photo(photo, caption=caption,
                                   parse_mode="HTML", reply_markup=kb)
    else:  # ---------- —Ñ–æ—Ç–æ –Ω–µ—Ç ----------
        await bot.edit_message_text(chat_id=msg.chat.id,
                                    message_id=data.get("gmsgid"),
                                    text=caption, parse_mode="HTML", reply_markup=kb)

    await state.set_state(VioFSM.CardFull)
    await msg.delete()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤—ã–±–æ—Ä —Å–µ—Ä—å—ë–∑–Ω–æ—Å—Ç–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.callback_query(F.data.startswith("vio_start:"), IsAdmin())
async def vio_start(cb: types.CallbackQuery, state: FSMContext):
    await state.set_state(VioFSM.ChooseSeverity)
    try:
        await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—è–∂–µ—Å—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è:", reply_markup=severity_kb())
    except TelegramBadRequest:
        await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—è–∂–µ—Å—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è:", reply_markup=severity_kb())
        await cb.message.delete()
    await cb.answer()


@dp.callback_query(VioFSM.ChooseSeverity, F.data.startswith("vio_s:"), IsAdmin())
async def vio_choose_sev(cb: types.CallbackQuery, state: FSMContext):
    _, sev = cb.data.split(":")
    await state.update_data(sev=sev)
    await state.set_state(VioFSM.ChooseTemplate)
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø–æ–≤–æ–π —à–∞–±–ª–æ–Ω:", reply_markup=template_kb(sev))
    await cb.answer()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —à–∞–±–ª–æ–Ω / –¥—Ä—É–≥–æ–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.callback_query(VioFSM.ChooseTemplate, F.data.startswith("vio_tpl_idx:"), IsAdmin())
async def vio_tpl_selected(cb: types.CallbackQuery, state: FSMContext):
    idx_str = cb.data.split(":")[1]
    if idx_str == "custom":
        await state.set_state(VioFSM.CustomDescr)
        await cb.message.edit_text("–û–ø–∏—à–∏—Ç–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ:",
                                   reply_markup=InlineKeyboardMarkup(
                                       inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–∑–∞–¥",
                                                                              callback_data="vio_back2tpl")]]
                                   ))
    else:
        idx = int(idx_str)
        sev = (await state.get_data())["sev"]
        df = pd.read_excel(XL_PATH)
        descr = df[sev].dropna().iloc[idx]  # ‚Üê –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        await state.update_data(descr=descr)
        await _ask_date(cb, state)
    await cb.answer()


@dp.message(VioFSM.CustomDescr, IsAdmin())
async def vio_save_descr(msg: types.Message, state: FSMContext):
    await state.update_data(descr=msg.text.strip())
    await _ask_date(msg, state)
    await bot.delete_message(msg.chat.id, msg.message_id - 1)
    await msg.delete()


async def _ask_date(evmsg: types.Union[types.CallbackQuery, types.Message],
                    state: FSMContext) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–≥ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã:
      ‚Ä¢ –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª CallbackQuery ‚Üí —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ;
      ‚Ä¢ –µ—Å–ª–∏ –æ–±—ã—á–Ω—ã–π Message       ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    await state.set_state(VioFSM.ChooseDate)

    text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—Ä—É—à–µ–Ω–∏—è:"
    kb = date_kb()

    if isinstance(evmsg, types.CallbackQuery):
        await evmsg.message.edit_text(text, reply_markup=kb)
        await state.update_data(gmsgid=evmsg.message.message_id)
    else:  # Message
        msg = await evmsg.answer(text, reply_markup=kb)
        await state.update_data(gmsgid=msg.message_id)


async def _ask_file(evmsg: types.Union[types.CallbackQuery, types.Message], state: FSMContext):
    await state.set_state(VioFSM.WaitingFile)
    text = "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è."
    kb = attach_back_kb()
    if isinstance(evmsg, types.CallbackQuery):
        await evmsg.message.edit_text(text, reply_markup=kb)
        await state.update_data(gmsgid=evmsg.message.message_id)
    else:  # Message
        msg = await evmsg.answer(text, reply_markup=kb)
        await state.update_data(gmsgid=msg.message_id)


@dp.callback_query(VioFSM.ChooseDate, F.data == "vio_date:cal", IsAdmin())
async def vio_date_calendar(cb: types.CallbackQuery,
                            state: FSMContext,
                            dialog_manager: DialogManager):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã _confirm() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ on_pick().
    """
    await dialog_manager.start(
        ViolCal.Pick,
        mode=StartMode.RESET_STACK,
        data={"parent_fsm": state}
    )
    await cb.answer()


@dp.callback_query(VioFSM.ChooseDate, F.data.startswith("vio_date:"), IsAdmin())
async def vio_date_quick(cb: types.CallbackQuery, state: FSMContext):
    if cb.data.endswith(":today"):
        date_str = datetime.now().strftime("%d.%m.%Y")
        await state.update_data(vdate=date_str)
        await _ask_file(cb, state)
    await cb.answer()


@dp.message(VioFSM.WaitingFile, F.document | F.photo, IsAdmin())
async def vio_got_file(msg: types.Message, state: FSMContext):
    file_id = msg.document.file_id if msg.document else msg.photo[-1].file_id
    await state.update_data(attach=file_id,
                            attach_type="document" if msg.document else "photo")
    await _confirm_with_media(msg, state)
    try:
        await bot.delete_message(chat_id=msg.chat.id, message_id=msg.message_id - 1)
    except TelegramBadRequest:
        pass
    await msg.delete()


async def _confirm_with_media(evmsg, state: FSMContext):
    d = await state.get_data()

    # –§–ò–û + username
    cursor.execute("SELECT full_name, username FROM users WHERE user_id=?", (d["uid"],))
    full_name, username = cursor.fetchone()
    uname_part = f" (@{username})" if username else ""

    caption = (f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
               f"üë§ <b>{full_name}</b>{uname_part}\n"
               f"ID: <code>{d['uid']}</code>\n"
               f"–¢—è–∂–µ—Å—Ç—å: <b>{SEV_RU[d['sev']]}</b>\n"
               f"–û–ø–∏—Å–∞–Ω–∏–µ: {d['descr']}\n"
               f"–î–∞—Ç–∞: {d['vdate']}")

    await state.set_state(VioFSM.Confirm)

    if d["attach_type"] == "photo":
        await evmsg.answer_photo(
            d["attach"], caption=caption, parse_mode="HTML", reply_markup=confirm_kb()
        )
    else:
        await evmsg.answer_document(
            d["attach"], caption=caption, parse_mode="HTML", reply_markup=confirm_kb()
        )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.callback_query(VioFSM.Confirm, F.data == "vio_save", IsAdmin())
async def vio_save(cb: types.CallbackQuery, state: FSMContext):
    d = await state.get_data()
    # 1. –∑–∞–ø–∏—Å—å –≤ violations
    cursor.execute("""
        INSERT INTO violations (user_id, admin_id, description,
                                violation_date, severity)
        VALUES (?, ?, ?, ?, ?)
    """, (d["uid"], cb.from_user.id, d["descr"],
          datetime.strptime(d["vdate"], "%d.%m.%Y").strftime("%Y-%m-%d"),
          d["sev"]))
    vio_id = cursor.lastrowid
    # 2. —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª-–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ
    cursor.execute("""
        INSERT INTO user_documents (user_id, document_type, file_path, comment, status)
        VALUES (?, 'violation_proof', ?, ?, 'accepted')
    """, (d["uid"], d["attach"], f"violation:{vio_id}"))
    conn.commit()
    from admins.keyboards import get_superadmin_panel_kb
    await cb.message.answer("‚úÖ –ù–∞—Ä—É—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ!", reply_markup=get_superadmin_panel_kb())
    await cb.message.delete()
    await state.clear()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ¬´–ù–∞–∑–∞–¥¬ª —Ö–µ–Ω–¥–ª–µ—Ä—ã (—É–ø—Ä–æ—â—ë–Ω–Ω–æ) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.callback_query(F.data.startswith("vio_back"), IsAdmin())
async def vio_back(cb: types.CallbackQuery, state: FSMContext):
    # –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏: –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
    from admins.keyboards import get_superadmin_panel_kb
    await state.clear()
    await cb.message.edit_text("–ü–∞–Ω–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞:", reply_markup=get_superadmin_panel_kb())
    await cb.answer()
