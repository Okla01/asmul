"""
Handlers –±–ª–æ–∫–∞ ¬´–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–æ–≤ / —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞¬ª —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞.

–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π, –Ω–µ—É—Ä–µ–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª. –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
  ‚Ä¢ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é / –≤—ã–±–æ—Ä –æ—Ç—á—ë—Ç–∞;
  ‚Ä¢ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞;
  ‚Ä¢ —ç–∫—Å–ø–æ—Ä—Ç (–æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è ‚Äî –≤—ã–±–æ—Ä –æ–±—ä–µ–∫—Ç–æ–≤ ‚Üí –¥–∞—Ç—ã ‚Üí —Ñ–æ—Ä–º–∞—Ç ‚Üí –≤—ã–≥—Ä—É–∑–∫–∞);
  ‚Ä¢ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ + ¬´–ù–∞–∑–∞–¥¬ª.
"""

from __future__ import annotations

from datetime import datetime
from typing import List, Optional
from textwrap import shorten

from aiogram import F, html, types
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram_dialog import DialogManager, StartMode

from admins.filters.is_admin import IsAdmin
from admins.superadmin.reports.calendar import rep_calendar_dialog
from admins.superadmin.reports.exporter import export_report
from admins.superadmin.reports.keyboards import (
    absence_obj_kb,
    date_choose_kb,
    format_kb,
    reports_main_kb,
)
from admins.superadmin.reports.states import RepFSM
from config import LOCATION_NAMES, bot, dp
from db.database import conn


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _today() -> str:
    """–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å DD.MM.YYYY (Europe/Helsinki)."""
    return datetime.now().strftime("%d.%m.%Y")


async def _edit_safe(msg: types.Message,
              *,
              text: str,
              reply_markup: Optional[InlineKeyboardMarkup] = None,
              parse_mode: str = "HTML") -> None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π edit_text¬†‚Äî –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ."""
    try:
        await msg.edit_text(text, parse_mode=parse_mode, reply_markup=reply_markup)
    except TelegramBadRequest:
        await msg.answer(text, parse_mode=parse_mode, reply_markup=reply_markup)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 1. –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@dp.callback_query(F.data == "sa_export", IsAdmin())
async def rep_main(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–ª–æ–∫–∞ ¬´–û—Ç—á—ë—Ç—ã/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞¬ª."""
    await state.clear()
    await state.set_state(RepFSM.Main)
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á—ë—Ç:", reply_markup=reports_main_kb())
    await cb.answer()


@dp.callback_query(RepFSM.Main, F.data.startswith("rep_"), IsAdmin())
async def rep_choose_report(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –ø—É–Ω–∫—Ç—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."""
    cmd = cb.data
    if cmd == "rep_stats":
        return await _show_stats(cb, state)

    # —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞
    kind = cmd.split("_", 1)[1]  # clean / events / violations / absence
    await state.update_data(report_kind=kind)

    if kind == "absence":
        # —à–∞–≥ 1 ‚Äî –≤—ã–±–æ—Ä –æ–±—ä–µ–∫—Ç–æ–≤ (–ª–æ–∫–∞—Ü–∏–π)
        await state.set_state(RepFSM.ChooseAbsObj)
        await cb.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
            reply_markup=absence_obj_kb([]),
        )
    else:
        # —Å—Ä–∞–∑—É –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
        await _ask_start_date(cb, state, back_cb="rep_back2main")
    await cb.answer()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 2. –°–¢–ê–¢–ò–°–¢–ò–ö–ê
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def _show_stats(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —á–µ—Ç—ã—Ä—ë–º —Ç–∞–±–ª–∏—Ü–∞–º."""
    cur = conn.cursor()

    cur.execute("SELECT COUNT(*) FROM room_cleanliness_reports")
    clean_cnt = cur.fetchone()[0]

    cur.execute("SELECT COUNT(*) FROM event_attendance WHERE attended = 1")
    events_cnt = cur.fetchone()[0]

    cur.execute("SELECT COUNT(*) FROM violations")
    viol_cnt = cur.fetchone()[0]

    cur.execute("SELECT place, COUNT(*) FROM absences GROUP BY place")
    abs_rows = cur.fetchall()

    lines = [
        f"üßπ –û—Ç—á—ë—Ç–æ–≤ —á–∏—Å—Ç–æ—Ç—ã: <b>{clean_cnt}</b>",
        f"üìÖ –ü–æ—Å–µ—â–µ–Ω–∏–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: <b>{events_cnt}</b>",
        f"üöî –ù–∞—Ä—É—à–µ–Ω–∏–π: <b>{viol_cnt}</b>",
        "",
        "üö™ <b>–û—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ –æ–±—ä–µ–∫—Ç–∞–º</b>:",
    ]
    for place, cnt in abs_rows:
        lines.append(f"  ‚Ä¢ {LOCATION_NAMES.get(place, place)} ‚Äî {cnt}")

    await state.set_state(RepFSM.StatsShow)
    await cb.message.edit_text(
        "\n".join(lines),
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup.inline_keyboard(
            [[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="rep_back2main")]]
        ),
    )
    await cb.answer()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 3. –û–¢–°–£–¢–°–¢–í–ò–Ø ‚Äî –í–´–ë–û–† –û–ë–™–ï–ö–¢–û–í
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@dp.callback_query(RepFSM.ChooseAbsObj, F.data.startswith("rep_absobj:"), IsAdmin())
async def rep_abs_toggle_obj(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ß–µ–∫–±–æ–∫—Å—ã –æ–±—ä–µ–∫—Ç–æ–≤: –¥–æ–±–∞–≤–ª—è–µ—Ç/—É–¥–∞–ª—è–µ—Ç –∫–æ–¥ –≤ —Å–ø–∏—Å–∫–µ ``absence_objs``."""
    code = cb.data.split(":")[1]
    data = await state.get_data()
    chosen: List[str] = data.get("absence_objs", [])
    chosen = [*chosen, code] if code not in chosen else [c for c in chosen if c != code]
    await state.update_data(absence_objs=chosen)
    await cb.message.edit_reply_markup(reply_markup=absence_obj_kb(chosen))
    await cb.answer()


@dp.callback_query(RepFSM.ChooseAbsObj, F.data == "rep_abs_confirm", IsAdmin())
async def rep_abs_confirm_objs(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤."""
    if not (await state.get_data()).get("absence_objs"):
        return await cb.answer("–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç.", show_alert=True)

    await _ask_start_date(cb, state, back_cb="rep_back2main")
    await cb.answer()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 4. –í–´–ë–û–† –î–ê–¢
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def _ask_start_date(cb: types.CallbackQuery, state: FSMContext, *, back_cb: str) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞."""
    await state.set_state(RepFSM.ChooseStart)
    await cb.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ <b>–Ω–∞—á–∞–ª—å–Ω—É—é</b> –¥–∞—Ç—É:",
        parse_mode="HTML",
        reply_markup=date_choose_kb(back_cb),
    )


async def _ask_end_date(src: types.Message | types.CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É –∫–æ–Ω—Ü–∞."""
    await state.set_state(RepFSM.ChooseEnd)
    data = await state.get_data()
    txt = f"–ù–∞—á–∞–ª–æ: <b>{data['start']}</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ <b>–∫–æ–Ω–µ—á–Ω—É—é</b> –¥–∞—Ç—É:"
    tgt = src.message if isinstance(src, types.CallbackQuery) else src
    await _edit_safe(tgt, text=txt, reply_markup=date_choose_kb("rep_back2start"))


@dp.callback_query(RepFSM.ChooseStart, F.data == "rep_date:today", IsAdmin())
async def rep_start_today(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ö–Ω–æ–ø–∫–∞ ¬´–°–µ–≥–æ–¥–Ω—è¬ª –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã."""
    await state.update_data(start=_today())
    await _ask_end_date(cb, state)
    await cb.answer()


@dp.callback_query(RepFSM.ChooseEnd, F.data == "rep_date:today", IsAdmin())
async def rep_end_today(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ö–Ω–æ–ø–∫–∞ ¬´–°–µ–≥–æ–¥–Ω—è¬ª –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã."""
    await state.update_data(end=_today())
    await _ask_format(cb, state)
    await cb.answer()


@dp.callback_query(RepFSM.ChooseStart, F.data == "rep_date:cal", IsAdmin())
async def rep_start_calendar(cb: types.CallbackQuery, state: FSMContext, dialog_manager: DialogManager) -> None:
    """–û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã."""
    dialog_manager.start(rep_calendar_dialog, StartMode.NORMAL,
                         start_data={"step": "start", "fsm": state})
    await cb.answer()


@dp.callback_query(RepFSM.ChooseEnd, F.data == "rep_date:cal", IsAdmin())
async def rep_end_calendar(cb: types.CallbackQuery, state: FSMContext, dialog_manager: DialogManager) -> None:
    """–û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã."""
    dialog_manager.start(rep_calendar_dialog, StartMode.NORMAL,
                         start_data={"step": "end", "fsm": state})
    await cb.answer()


async def back_from_calendar(c: types.CallbackQuery, mgr: DialogManager) -> None:
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ."""
    fsm: FSMContext = mgr.start_data["fsm"]
    data = await fsm.get_data()
    if "start" in data and "end" not in data:
        await _ask_end_date(c, fsm)
    elif "start" in data and "end" in data:
        await _ask_format(c, fsm)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 5. –§–û–†–ú–ê–¢
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def _ask_format(src: types.Message | types.CallbackQuery, state: FSMContext) -> None:
    await state.set_state(RepFSM.ChooseFormat)
    data = await state.get_data()
    txt = (
        f"–ù–∞—á–∞–ª–æ: <b>{data['start']}</b>\n"
        f"–ö–æ–Ω–µ—Ü: <b>{data['end']}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:"
    )
    tgt = src.message if isinstance(src, types.CallbackQuery) else src
    await _edit_safe(tgt, text=txt, reply_markup=format_kb())


@dp.callback_query(RepFSM.ChooseFormat, F.data.startswith("rep_fmt:"), IsAdmin())
async def rep_do_export(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç."""
    fmt = cb.data.split(":")[1]
    data = await state.get_data()

    await cb.answer("–§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á—ë—Ç, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è‚Ä¶", show_alert=True)
    try:
        zip_path = await export_report(
            kind=data["report_kind"],
            date_from=data["start"],
            date_to=data["end"],
            fmt=fmt,
            abs_places=data.get("absence_objs"),
        )
    except Exception as exc:  # pylint: disable=broad-except
        await _edit_safe(cb.message, text=f"‚ùóÔ∏è –û—à–∏–±–∫–∞: {html.quote(str(exc))}")
        await state.clear()
        return

    await bot.send_document(cb.from_user.id, FSInputFile(zip_path))
    await cb.message.edit_text("‚úÖ –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤!", reply_markup=reports_main_kb())
    await state.set_state(RepFSM.Main)
    await cb.answer()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 6. ¬´–ù–ê–ó–ê–î¬ª
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@dp.callback_query(F.data == "rep_back2main", IsAdmin())
async def rep_back_main(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç—á—ë—Ç–æ–≤."""
    await state.set_state(RepFSM.Main)
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á—ë—Ç:", reply_markup=reports_main_kb())
    await cb.answer()


@dp.callback_query(F.data == "rep_back2start", IsAdmin())
async def rep_back_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã."""
    await _ask_start_date(cb, state, back_cb="rep_back2main")
    await cb.answer()
