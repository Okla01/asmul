"""
–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–ª—è—Ç—å –û–° (–æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å)
—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º –ø—Ä–∞–∫—Ç–∏–∫–∏.

–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω (¬´admin_supervisor¬ª) –º–æ–∂–µ—Ç:
* —É–≤–∏–¥–µ—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–ª–∞–≥–∞ `os_enabled`;
* –≤–∫–ª—é—á–∏—Ç—å / –≤—ã–∫–ª—é—á–∏—Ç—å –µ–≥–æ.

–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–º. –≤ `keyboards.py`.
"""

from __future__ import annotations

from typing import Final

from aiogram import F, types
from aiogram.exceptions import TelegramBadRequest

from admins.filters.is_admin import IsAdmin
from admins.superadmin.feedback_settings.keyboards import os_toggle_kb
from config import dp
from db.database import get_bool_setting, get_user_role, set_bool_setting

_SUPERVISOR_ROLE: Final = "admin_supervisor"
_FLAG_KEY: Final = "os_enabled"


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ—Ä–Ω–µ–≤–æ–µ –º–µ–Ω—é ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
@dp.callback_query(F.data == "sa_os_view", IsAdmin())
async def sa_os_menu(cb: types.CallbackQuery) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ü–∏–∏ ¬´–û—Å—Ç–∞–≤–ª—è—Ç—å –û–°¬ª –∏ –∫–Ω–æ–ø–∫–∏ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è.
    """
    if get_user_role(cb.from_user.id) != _SUPERVISOR_ROLE:
        return await cb.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—É.", show_alert=True)

    enabled: bool = get_bool_setting(_FLAG_KEY, False)
    status = "–≤–∫–ª—é—á–µ–Ω–æ ‚úÖ" if enabled else "–≤—ã–∫–ª—é—á–µ–Ω–æ üö´"

    try:
        await cb.message.edit_text(
            "<b>–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –û–° –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: <b>{status}</b>",
            parse_mode="HTML",
            reply_markup=os_toggle_kb(enabled),
        )
    except TelegramBadRequest:
        # fallback ‚Äî –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ
        await cb.message.answer(
            "<b>–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –û–° –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: <b>{status}</b>",
            parse_mode="HTML",
            reply_markup=os_toggle_kb(enabled),
        )
    await cb.answer()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
@dp.callback_query(F.data.in_(("sa_os_on", "sa_os_off")), IsAdmin())
async def sa_os_switch(cb: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ¬´üü¢ –í–∫–ª—é—á–∏—Ç—å¬ª / ¬´üî¥ –í—ã–∫–ª—é—á–∏—Ç—å¬ª.

    * sa_os_on  ‚Üí turn_on = True
    * sa_os_off ‚Üí turn_on = False
    """
    if get_user_role(cb.from_user.id) != _SUPERVISOR_ROLE:
        return await cb.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—É.", show_alert=True)

    turn_on: bool = cb.data == "sa_os_on"
    set_bool_setting(_FLAG_KEY, turn_on)

    status_txt = "–≤–∫–ª—é—á–µ–Ω–∞ ‚úÖ" if turn_on else "–≤—ã–∫–ª—é—á–µ–Ω–∞ üö´"
    await cb.message.edit_text(
        f"–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–∞—Ç—å –û–° {status_txt}.",
        parse_mode="HTML",
        reply_markup=os_toggle_kb(turn_on),
    )
    await cb.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
