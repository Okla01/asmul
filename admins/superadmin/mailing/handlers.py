"""
–ú–æ–¥—É–ª—å ¬´–†–∞—Å—Å—ã–ª–∫–∏¬ª (Super-Admin)
===============================

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
----------------
1. ¬´–ö–æ–º—É¬ª ‚Äî —É—á–∞—Å—Ç–Ω–∏—Ü—ã (–ø–æ —Ç–∏–∫–∞–º) / –≤—Å–µ / —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º) / –∫–∞–Ω–¥–∏–¥–∞—Ç–∫–∏.
2. –†–µ–∂–∏–º ¬´—Å–µ–π—á–∞—Å¬ª –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–∞—Ç–∞ + –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å).
3. –ü—Ä–æ—Å–º–æ—Ç—Ä / —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ / —É–¥–∞–ª–µ–Ω–∏–µ –±—É–¥—É—â–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫.
4. –§–æ–Ω–æ–≤—ã–π `scheduler.py` —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
"""

from __future__ import annotations

import json
from datetime import datetime
from textwrap import shorten
from typing import Final, Iterable, List, Set

from aiogram import F, html, types
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramAPIError
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from admins.filters.is_admin import IsAdmin
from admins.keyboards import delete_this_msg, get_superadmin_panel_kb
from admins.superadmin.mailing.keyboards import (
    STAFF_CATEGORIES,
    confirm_kb,
    edit_opts_kb,
    planned_detail_kb,
    recurrence_kb,
    staff_kb,
    targets_kb,
    tiks_kb,
)
from admins.superadmin.mailing.states import Mailing
from config import bot, dp
from db.database import conn, cursor

# --------------------------------------------------------------------------- #
#                              –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï                                #
# --------------------------------------------------------------------------- #

_REC_HUMAN: Final = {
    "once": "–æ–¥–∏–Ω —Ä–∞–∑",
    "daily": "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å",
    "weekly": "–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é",
    "monthly": "–∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü",
}

_REC_CB2CODE: Final = {
    "rec_once": "once",
    "rec_day": "daily",
    "rec_week": "weekly",
    "rec_month": "monthly",
}


def _rec_to_human(code: str) -> str:
    """'daily' ‚Üí '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å'."""
    return _REC_HUMAN.get(code, code)


def _collect_recipients(filters: dict) -> List[int]:
    """
    –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ `user_id` –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏.

    *target*:
        - ml_all
        - ml_candidates
        - ml_participants  (–Ω—É–∂–µ–Ω filters.chosen_tiks)
        - ml_staff         (–Ω—É–∂–µ–Ω filters.chosen_staff)
    """
    target: str = filters["target"]

    if target == "ml_all":
        cursor.execute("SELECT user_id FROM users")
        return [r[0] for r in cursor.fetchall()]

    if target == "ml_candidates":
        cursor.execute("SELECT user_id FROM users WHERE role = 'user_unauthorized'")
        return [r[0] for r in cursor.fetchall()]

    if target == "ml_participants":
        tiks: Set[str] = set(filters.get("chosen_tiks", []))
        if not tiks:
            return []
        placeholders = ", ".join("?" * len(tiks))
        cursor.execute(
            f"SELECT user_id FROM users "
            f"WHERE role = 'user_participant' AND tik IN ({placeholders})",
            tuple(tiks),
        )
        return [r[0] for r in cursor.fetchall()]

    if target == "ml_staff":
        cats: Set[str] = set(filters.get("chosen_staff", []))
        if not cats:
            return []

        roles: list[str] = []
        if "emp" in cats:
            roles.append("employee")
        if "psup" in cats:
            roles.append("admin_practice_supervisor")
        if "admin" in cats:
            roles.append("admin_admin")
        if "supad" in cats:
            roles.append("admin_supervisor")

        placeholders = ", ".join("?" * len(roles))
        cursor.execute(f"SELECT user_id FROM users WHERE role IN ({placeholders})", tuple(roles))
        return [r[0] for r in cursor.fetchall()]

    return []  # fallback


# --------------------------------------------------------------------------- #
#                      0. –í–•–û–î –ò–ó –ü–ê–ù–ï–õ–ò –°–£–ü–ï–†–ê–î–ú–ò–ù–ê                          #
# --------------------------------------------------------------------------- #


@dp.callback_query(F.data == "sa_mailing", IsAdmin())
async def ml_entry(cb: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await state.set_state(Mailing.ChooseTarget)
    await cb.message.edit_text(
        "–ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?", reply_markup=targets_kb()
    )
    await cb.answer()


# --------------------------------------------------------------------------- #
#                        1. –°–ü–ò–°–û–ö –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–´–•                            #
# --------------------------------------------------------------------------- #


@dp.callback_query(Mailing.ChooseTarget, F.data == "ml_planned", IsAdmin())
async def ml_show_planned(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–ª–∏–∂–∞–π—à–∏–µ 30 –±—É–¥—É—â–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫."""
    now_iso = datetime.now().isoformat(timespec="seconds")
    cursor.execute(
        """
        SELECT id, scheduled_at
          FROM mailings
         WHERE scheduled_at > ?
      ORDER BY scheduled_at
         LIMIT 30
        """,
        (now_iso,),
    )
    rows = cursor.fetchall()

    if not rows:
        await cb.message.edit_text(
            "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –Ω–µ—Ç.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="ml_back_targets")]]
            ),
        )
        await cb.answer()
        return

    kb = InlineKeyboardBuilder()
    for mid, iso_dt in rows:
        dt = datetime.fromisoformat(iso_dt).strftime("%d.%m %H:%M")
        kb.button(text=f"{mid} ¬∑ {dt}", callback_data=f"ml_planned_view:{mid}")
    kb.adjust(1)
    kb.row(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="ml_back_targets"))

    await state.set_state(Mailing.ViewPlanned)
    await cb.message.edit_text(
        "üìã <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –¥–µ—Ç–∞–ª–µ–π:",
        parse_mode="HTML",
        reply_markup=kb.as_markup(),
    )
    await cb.answer()


@dp.callback_query(Mailing.ViewPlanned, F.data.startswith("ml_planned_view:"), IsAdmin())
async def ml_planned_detail(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏."""
    mid = int(cb.data.split(":")[1])
    cursor.execute(
        "SELECT scheduled_at, recurrence, message FROM mailings WHERE id = ?", (mid,)
    )
    row = cursor.fetchone()
    if not row:
        return await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)

    sched_iso, rec_code, msg = row
    sched_h = datetime.fromisoformat(sched_iso).strftime("%d.%m.%Y %H:%M")
    preview = shorten(msg, 200, placeholder="‚Ä¶")

    await state.update_data(edit_mid=mid)
    await state.set_state(Mailing.PlannedDetail)
    await cb.message.edit_text(
        f"*ID {mid}*\n"
        f"‚Ä¢ –ö–æ–≥–¥–∞: {sched_h}\n"
        f"‚Ä¢ –ü–µ—Ä–∏–æ–¥: {_rec_to_human(rec_code)}\n"
        f"‚Ä¢ –¢–µ–∫—Å—Ç:\n{preview}",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=planned_detail_kb(mid),
    )
    await cb.answer()


# ---------- –£–¥–∞–ª–µ–Ω–∏–µ ------------------------------------------------------- #


@dp.callback_query(Mailing.PlannedDetail, F.data.startswith("ml_planned_del:"), IsAdmin())
async def ml_del_confirm(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è."""
    await state.set_state(Mailing.DeleteConfirm)
    await cb.message.edit_text(
        "‚ùóÔ∏è –£–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ä–∞—Å—Å—ã–ª–∫—É –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ?",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="ml_del_yes")],
                [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="ml_del_no")],
            ]
        ),
    )
    await cb.answer()


@dp.callback_query(Mailing.DeleteConfirm, F.data == "ml_del_yes", IsAdmin())
async def ml_del_yes(cb: types.CallbackQuery, state: FSMContext) -> None:
    mid = (await state.get_data())["edit_mid"]
    cursor.execute("DELETE FROM mailings WHERE id = ?", (mid,))
    conn.commit()

    await state.set_state(Mailing.ViewPlanned)
    await cb.message.edit_text("‚úÖ –£–¥–∞–ª–µ–Ω–æ.", reply_markup=targets_kb())
    await cb.answer()


@dp.callback_query(Mailing.DeleteConfirm, F.data == "ml_del_no", IsAdmin())
async def ml_del_no(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è."""
    mid = (await state.get_data())["edit_mid"]
    cursor.execute(
        "SELECT scheduled_at, recurrence, message FROM mailings WHERE id = ?", (mid,)
    )
    sched_iso, rec_code, msg = cursor.fetchone()
    preview = shorten(msg, 200, placeholder="‚Ä¶")
    await state.set_state(Mailing.PlannedDetail)
    await cb.message.edit_text(
        f"*ID {mid}*\n"
        f"‚Ä¢ –ö–æ–≥–¥–∞: {datetime.fromisoformat(sched_iso).strftime('%d.%m.%Y %H:%M')}\n"
        f"‚Ä¢ –ü–µ—Ä–∏–æ–¥: {_rec_to_human(rec_code)}\n\n"
        f"{preview}",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=planned_detail_kb(mid),
    )
    await cb.answer()


# ---------- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ------------------------------------------------- #
# (—Ç–µ–∫—Å—Ç / –¥–∞—Ç–∞ / –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å)                                             #

@dp.callback_query(Mailing.PlannedDetail, F.data.startswith("ml_planned_edit:"), IsAdmin())
async def ml_edit_menu(cb: types.CallbackQuery, state: FSMContext) -> None:
    await state.set_state(Mailing.EditMenu)
    await cb.message.edit_text("–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=edit_opts_kb())
    await cb.answer()


# --- –¢–µ–∫—Å—Ç ----------------------------------------------------------------- #
@dp.callback_query(Mailing.EditMenu, F.data == "ml_edit_text", IsAdmin())
async def ml_edit_text_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    await state.set_state(Mailing.EditText)
    await cb.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.\n‚¨ÖÔ∏è /cancel –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.")
    await cb.answer()


@dp.message(Mailing.EditText, IsAdmin())
async def ml_edit_text_save(msg: types.Message, state: FSMContext) -> None:
    mid = (await state.get_data())["edit_mid"]
    cursor.execute("UPDATE mailings SET message = ? WHERE id = ?", (msg.md_text, mid))
    conn.commit()

    await state.set_state(Mailing.PlannedDetail)
    await msg.reply("‚úÖ –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=planned_detail_kb(mid), parse_mode="HTML")


# --- –î–∞—Ç–∞/–≤—Ä–µ–º—è ------------------------------------------------------------ #
@dp.callback_query(Mailing.EditMenu, F.data == "ml_edit_dt", IsAdmin())
async def ml_edit_dt_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    await state.set_state(Mailing.EditSchedule)
    await cb.message.edit_text("–ù–æ–≤–∞—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):")
    await cb.answer()


@dp.message(Mailing.EditSchedule, IsAdmin())
async def ml_edit_dt_save(msg: types.Message, state: FSMContext) -> None:
    try:
        dt = datetime.strptime(msg.text.strip(), "%d.%m.%Y %H:%M")
        if dt <= datetime.now():
            raise ValueError
    except ValueError:
        return await msg.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ.")

    mid = (await state.get_data())["edit_mid"]
    cursor.execute(
        "UPDATE mailings SET scheduled_at = ?, sent = 0 WHERE id = ?",
        (dt.isoformat(timespec="seconds"), mid),
    )
    conn.commit()

    await state.set_state(Mailing.PlannedDetail)
    await msg.reply("‚úÖ –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞.", reply_markup=planned_detail_kb(mid), parse_mode="HTML")


# --- –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å --------------------------------------------------------- #
@dp.callback_query(Mailing.EditMenu, F.data == "ml_edit_rec", IsAdmin())
async def ml_edit_rec_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    await state.set_state(Mailing.EditRecurrence)
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:", reply_markup=recurrence_kb())
    await cb.answer()


@dp.callback_query(Mailing.EditRecurrence, F.data.startswith("rec_"), IsAdmin())
async def ml_edit_rec_save(cb: types.CallbackQuery, state: FSMContext) -> None:
    rec_code = _REC_CB2CODE[cb.data]
    mid = (await state.get_data())["edit_mid"]

    cursor.execute("UPDATE mailings SET recurrence = ? WHERE id = ?", (rec_code, mid))
    conn.commit()

    await state.set_state(Mailing.PlannedDetail)
    await cb.message.edit_text("‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞.", reply_markup=planned_detail_kb(mid))
    await cb.answer()


# --------------------------------------------------------------------------- #
#                        2. –í–´–ë–û–† –ê–£–î–ò–¢–û–†–ò–ò (¬´–¶–ï–õ–¨¬ª)                          #
# --------------------------------------------------------------------------- #


@dp.callback_query(Mailing.ChooseTarget, F.data.startswith("ml_"), IsAdmin())
async def ml_target_chosen(cb: types.CallbackQuery, state: FSMContext) -> None:
    """
    ¬´ml_participants¬ª ‚Üí tiks,  ¬´ml_staff¬ª ‚Üí –∫–∞—Ç–µ–≥–æ—Ä–∏–∏,  
    ¬´ml_all / ml_candidates¬ª ‚Üí —Å—Ä–∞–∑—É –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞.
    """
    cmd = cb.data
    await state.update_data(target=cmd, gmsid=cb.message.message_id)

    # --- —É—á–∞—Å—Ç–Ω–∏—Ü—ã: –≤—ã–±–æ—Ä —Ç–∏–∫–æ–≤
    if cmd == "ml_participants":
        cursor.execute(
            """
            SELECT DISTINCT tik
              FROM users
             WHERE role = 'user_participant' AND tik IS NOT NULL
          ORDER BY tik
            """
        )
        all_tiks = [str(r[0]) for r in cursor.fetchall()]
        if not all_tiks:
            return await cb.answer("–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏—Ü —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–∏–∫–æ–º.", show_alert=True)

        await state.update_data(all_tiks=all_tiks, chosen_tiks=set())
        await state.set_state(Mailing.ChooseTik)
        await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–∏:", reply_markup=tiks_kb(all_tiks, set()))
        return await cb.answer()

    # --- —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if cmd == "ml_staff":
        await state.update_data(chosen_staff=set())
        await state.set_state(Mailing.ChooseStaff)
        await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:", reply_markup=staff_kb(set()))
        return await cb.answer()

    # --- –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏: —Å—Ä–∞–∑—É –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
    await state.set_state(Mailing.WriteText)
    await cb.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="ml_cancel")]]
        ),
    )
    await cb.answer()


# --------------------------------------------------------------------------- #
#       2-a.  –†–∞–±–æ—Ç–∞ —Å —Ç–∏–∫-—á–µ–∫–±–æ–∫—Å–∞–º–∏                                         #
# --------------------------------------------------------------------------- #


@dp.callback_query(Mailing.ChooseTik, F.data.startswith("ml_tik_toggle:"), IsAdmin())
async def ml_tik_toggle(cb: types.CallbackQuery, state: FSMContext) -> None:
    tik = cb.data.split(":")[1]
    data = await state.get_data()
    chosen: Set[str] = set(data["chosen_tiks"])
    all_tiks: List[str] = data["all_tiks"]

    chosen.symmetric_difference_update({tik})
    await state.update_data(chosen_tiks=chosen)
    await cb.message.edit_reply_markup(reply_markup=tiks_kb(all_tiks, chosen))
    await cb.answer()


@dp.callback_query(Mailing.ChooseTik, F.data == "ml_tiks_done", IsAdmin())
async def ml_tiks_done(cb: types.CallbackQuery, state: FSMContext) -> None:
    chosen = (await state.get_data()).get("chosen_tiks", set())
    if not chosen:
        return await cb.answer("–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–∫.", show_alert=True)

    await state.set_state(Mailing.WriteText)
    await cb.message.edit_text(
        f"–¢–∏–∫–∏ –≤—ã–±—Ä–∞–Ω—ã: {', '.join(sorted(chosen))}\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="ml_cancel")]]
        ),
    )
    await cb.answer()


# --------------------------------------------------------------------------- #
#       2-b.  –†–∞–±–æ—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤                                 #
# --------------------------------------------------------------------------- #


@dp.callback_query(Mailing.ChooseStaff, F.data.startswith("ml_staff_toggle:"), IsAdmin())
async def ml_staff_toggle(cb: types.CallbackQuery, state: FSMContext) -> None:
    code = cb.data.split(":")[1]
    data = await state.get_data()
    chosen: Set[str] = set(data.get("chosen_staff", set()))

    chosen.symmetric_difference_update({code})
    await state.update_data(chosen_staff=chosen)
    await cb.message.edit_reply_markup(reply_markup=staff_kb(chosen))
    await cb.answer()


@dp.callback_query(Mailing.ChooseStaff, F.data == "ml_staff_done", IsAdmin())
async def ml_staff_done(cb: types.CallbackQuery, state: FSMContext) -> None:
    chosen = (await state.get_data()).get("chosen_staff", set())
    if not chosen:
        return await cb.answer("–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é.", show_alert=True)

    titles = {code: title for code, title in STAFF_CATEGORIES}
    names = ", ".join(titles[c] for c in chosen)

    await state.set_state(Mailing.WriteText)
    await cb.message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã–±—Ä–∞–Ω—ã: {names}\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="ml_cancel")]]
        ),
    )
    await cb.answer()


# --------------------------------------------------------------------------- #
#                        3. –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ                       #
# --------------------------------------------------------------------------- #


@dp.message(Mailing.WriteText, IsAdmin())
async def ml_text_saved(msg: types.Message, state: FSMContext) -> None:
    await state.update_data(text=msg.md_text)
    data = await state.get_data()
    gmsid: int = data["gmsid"]

    kb = InlineKeyboardBuilder()
    kb.button(text="üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="ml_send")
    kb.button(text="üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="ml_set_dt")
    kb.button(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="ml_cancel")

    await state.set_state(Mailing.Confirm)
    await bot.edit_message_text(
        chat_id=msg.chat.id,
        message_id=gmsid,
        text="<b>–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º?</b>",
        parse_mode="HTML",
        reply_markup=kb.adjust(1).as_markup(),
    )


# ---------- —à–∞–≥ ‚ûä ‚Äî –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã ------------------------------------------- #
@dp.callback_query(Mailing.Confirm, F.data == "ml_set_dt", IsAdmin())
async def ml_set_dt(cb: types.CallbackQuery, state: FSMContext) -> None:
    await state.set_state(Mailing.SetSchedule)
    await cb.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</b>\n–ü—Ä–∏–º–µ—Ä: 02.06.2025 14:30",
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="ml_cancel")]]
        ),
    )
    await cb.answer()


# ---------- —à–∞–≥ ‚ûã ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ ---------------------- #
@dp.message(Mailing.SetSchedule, IsAdmin())
async def ml_save_schedule(msg: types.Message, state: FSMContext) -> None:
    try:
        dt = datetime.strptime(msg.text.strip(), "%d.%m.%Y %H:%M")
        if dt <= datetime.now():
            raise ValueError
    except ValueError:
        return await msg.reply(
            "‚ùóÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è –∏–ª–∏ –º–æ–º–µ–Ω—Ç —É–∂–µ –≤ –ø—Ä–æ—à–ª–æ–º.",
            reply_markup=delete_this_msg(),
        )

    await state.update_data(scheduled_at=dt.isoformat(timespec="seconds"))
    data = await state.get_data()
    gmsid: int = data["gmsid"]

    await state.set_state(Mailing.SetRecurrence)
    await bot.edit_message_text(
        chat_id=msg.chat.id,
        message_id=gmsid,
        text="<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å</b>",
        parse_mode="HTML",
        reply_markup=recurrence_kb(),
    )


# ---------- —à–∞–≥ ‚ûå ‚Äî –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å ‚Üí —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ---------------- #
@dp.callback_query(Mailing.SetRecurrence, F.data.startswith("rec_"), IsAdmin())
async def ml_pick_recurrence(cb: types.CallbackQuery, state: FSMContext) -> None:
    rec_code = _REC_CB2CODE[cb.data]
    await state.update_data(recurrence=rec_code)

    data = await state.get_data()
    when_human = datetime.fromisoformat(data["scheduled_at"]).strftime("%d.%m.%Y %H:%M")
    text_preview = html.quote(shorten(data["text"], 200, placeholder="‚Ä¶"))

    await state.set_state(Mailing.Confirm)
    await cb.message.edit_text(
        f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"
        f"‚Ä¢ –ö–æ–≥–¥–∞: {when_human}\n"
        f"‚Ä¢ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {_rec_to_human(rec_code)}\n"
        f"‚Ä¢ –¢–µ–∫—Å—Ç:\n<tg-spoiler>{text_preview}</tg-spoiler>\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?",
        parse_mode="HTML",
        reply_markup=confirm_kb(),
    )
    await cb.answer()


# ---------- —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ ¬´–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å¬ª -------------------------------------- #
@dp.callback_query(Mailing.Confirm, F.data == "ml_plan_confirm", IsAdmin())
async def ml_plan_confirm(cb: types.CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    filters = {
        "target": data["target"],
        "chosen_tiks": sorted(list(data.get("chosen_tiks", []))),
        "chosen_staff": sorted(list(data.get("chosen_staff", []))),
    }

    cursor.execute(
        """
        INSERT INTO mailings (title, message, scheduled_at, sent, filters, recurrence)
        VALUES ('scheduled', ?, ?, 0, ?, ?)
        """,
        (data["text"], data["scheduled_at"], json.dumps(filters), data["recurrence"]),
    )
    conn.commit()

    await state.clear()
    await cb.message.edit_text(
        "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.", reply_markup=get_superadmin_panel_kb()
    )
    await cb.answer()


# --------------------------------------------------------------------------- #
#                          4. –û–¢–ü–†–ê–í–ö–ê ¬´–°–ï–ô–ß–ê–°¬ª                               #
# --------------------------------------------------------------------------- #


@dp.callback_query(Mailing.Confirm, F.data == "ml_send", IsAdmin())
async def ml_do_send(cb: types.CallbackQuery, state: FSMContext) -> None:
    await cb.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è‚Ä¶", show_alert=True)
    data = await state.get_data()
    users = _collect_recipients(data)
    if not users:
        await cb.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
        await state.clear()
        return

    sent = failed = 0
    for uid in users:
        try:
            await bot.send_message(uid, data["text"], parse_mode="HTML")
            sent += 1
        except TelegramAPIError:
            failed += 1

    cursor.execute(
        "INSERT INTO mailings (title, message, scheduled_at, sent) VALUES ('manual', ?, ?, 1)",
        (data["text"], datetime.now().isoformat(timespec="seconds")),
    )
    conn.commit()

    await state.clear()
    await cb.message.edit_text(
        f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.\n–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {sent}\n–û—à–∏–±–æ–∫: {failed}",
        reply_markup=targets_kb(),
    )
    await cb.answer()


# --------------------------------------------------------------------------- #
#                          5. –ö–ù–û–ü–ö–ò ¬´–ù–ê–ó–ê–î¬ª                                  #
# --------------------------------------------------------------------------- #


@dp.callback_query(
    Mailing.ViewPlanned,
    F.data == "ml_back_targets",
    IsAdmin(),
)
@dp.callback_query(
    Mailing.ChooseTik,
    F.data == "ml_back_targets",
    IsAdmin(),
)
@dp.callback_query(
    Mailing.ChooseStaff,
    F.data == "ml_back_targets",
    IsAdmin(),
)
async def ml_back_targets(cb: types.CallbackQuery, state: FSMContext) -> None:
    await state.set_state(Mailing.ChooseTarget)
    await cb.message.edit_text(
        "–ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?", reply_markup=targets_kb()
    )
    await cb.answer()
