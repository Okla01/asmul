"""
Super-admin FAQ editor
======================

–ü–æ–∑–≤–æ–ª—è–µ—Ç:
* –≤—ã–±–∏—Ä–∞—Ç—å —Ä–æ–ª—å –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –µ—ë FAQ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π;
* —Å–æ–∑–¥–∞–≤–∞—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –ø—É–Ω–∫—Ç—ã FAQ;
* –≤—ã–≥—Ä—É–∂–∞—Ç—å / –∑–∞–≥—Ä—É–∂–∞—Ç—å Excel –¥–ª—è ¬´–ö–∞–Ω–¥–∏–¥–∞—Ç–∫–∏¬ª.

–ì–ª–∞–≤–Ω—ã–µ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø–∏—Å–∞–Ω—ã –≤  *states.py*.
"""

from __future__ import annotations

import importlib
from pathlib import Path
from typing import Final, Iterable, List, Optional, Tuple

from aiogram import F, types
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext

from admins.filters.is_admin import IsAdmin
from admins.keyboards import delete_this_msg
from admins.superadmin.faq.keyboards import (
    confirm_edit_kb,
    confirm_kb,
    faq_item_kb,
    faq_list_kb,
    role_menu_kb,
    roles_kb,
)
from admins.superadmin.faq.states import FaqStates
from config import ROLES, bot, dp
from db.database import conn, cursor
from user.registration.utils import info as info_mod  # excel-FAQ ¬´–ö–∞–Ω–¥–∏–¥–∞—Ç–∫–∞¬ª

XL_PATH: Final = (
    Path(__file__).resolve().parents[3]
    / "user"
    / "registration"
    / "utils"
    / "excel"
    / "info.xlsx"
)


# --------------------------------------------------------------------------- #
#                          1. –í–´–ë–û–† –†–û–õ–ò                                      #
# --------------------------------------------------------------------------- #
@dp.callback_query(F.data == "sa_faq", IsAdmin())
async def faq_entry(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ö–æ—Ä–Ω–µ–≤–∞—è —Ç–æ—á–∫–∞ –º–µ–Ω—é ¬´üìö FAQ¬ª."""
    await state.clear()
    await state.update_data(page=0)
    await state.set_state(FaqStates.SelectRole)

    await cb.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å, FAQ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:",
        reply_markup=roles_kb(0),
    )
    await cb.answer()


@dp.callback_query(F.data.startswith("faq_roles_page:"), IsAdmin())
async def faq_roles_page(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ä–æ–ª–µ–π."""
    page: int = int(cb.data.split(":")[1])
    await state.update_data(page=page)
    await cb.message.edit_reply_markup(reply_markup=roles_kb(page))
    await cb.answer()


@dp.callback_query(F.data.startswith("faq_role:"), IsAdmin())
async def faq_role_selected(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–µ–Ω—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–æ–ª–∏."""
    role_code: str = cb.data.split(":")[1]
    await state.update_data(role=role_code)
    await state.set_state(FaqStates.RoleMenu)

    await cb.message.edit_text(
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ FAQ ‚Äì <b>{ROLES[role_code]}</b>",
        parse_mode="HTML",
        reply_markup=role_menu_kb(role_code),
    )
    await cb.answer()


@dp.callback_query(F.data == "faq_roles_root", IsAdmin())
async def faq_roles_root(cb: types.CallbackQuery, state: FSMContext) -> None:
    """¬´–ù–∞–∑–∞–¥¬ª –∏–∑ –º–µ–Ω—é —Ä–æ–ª–∏ –≤ —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã)."""
    page = (await state.get_data()).get("page", 0)
    await state.set_state(FaqStates.SelectRole)

    await cb.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å, FAQ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:",
        reply_markup=roles_kb(page),
    )
    await cb.answer()


# --------------------------------------------------------------------------- #
#                          2. –°–ü–ò–°–û–ö FAQ + –ü–£–ù–ö–¢                              #
# --------------------------------------------------------------------------- #
@dp.callback_query(F.data.startswith("faq_list:"), IsAdmin())
async def faq_list(cb: types.CallbackQuery) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    _, role_code, page_str = cb.data.split(":")
    page = int(page_str)

    cursor.execute(
        "SELECT id, question FROM faq WHERE for_role = ? ORDER BY id", (role_code,)
    )
    questions: List[Tuple[int, str]] = cursor.fetchall()

    await cb.message.edit_text(
        f"FAQ –¥–ª—è —Ä–æ–ª–∏ <b>{ROLES[role_code]}</b> (–≤—Å–µ–≥–æ {len(questions)}):",
        parse_mode="HTML",
        reply_markup=faq_list_kb(role_code, page, questions),
    )
    await cb.answer()


@dp.callback_query(F.data.startswith("faq_q:"), IsAdmin())
async def faq_open_item(cb: types.CallbackQuery) -> None:
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–¥–∏–Ω –ø—É–Ω–∫—Ç FAQ (–≤–æ–ø—Ä–æ—Å + –æ—Ç–≤–µ—Ç)."""
    _, role_code, qid_str = cb.data.split(":")
    qid = int(qid_str)

    cursor.execute("SELECT question, answer FROM faq WHERE id = ?", (qid,))
    row = cursor.fetchone()
    if not row:
        return await cb.answer("–ü—É–Ω–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

    question, answer = row
    text = f"<b>{question}</b>\n\n{answer}"

    await cb.message.edit_text(
        text, parse_mode="HTML", reply_markup=faq_item_kb(role_code, qid)
    )
    await cb.answer()


# --------------------------------------------------------------------------- #
#                       3.  –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï  –ü–£–ù–ö–¢–ê                            #
# --------------------------------------------------------------------------- #
@dp.callback_query(F.data.startswith("faq_edit:"), IsAdmin())
async def faq_edit_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–°—Ç–∞—Ä—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ ‚Üí –∂–¥—ë–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞."""
    _, role_code, qid_str = cb.data.split(":")
    qid = int(qid_str)

    await state.update_data(role=role_code, qid=qid, msg_q_id=cb.message.message_id)
    await state.set_state(FaqStates.EditQ)

    await cb.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å</b>\n(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´-¬ª, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω–∏–π):",
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"faq_q:{role_code}:{qid}")]
            ]
        ),
    )
    await cb.answer()


@dp.message(FaqStates.EditQ, IsAdmin())
async def faq_edit_q(msg: types.Message, state: FSMContext) -> None:
    """–ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å ‚Üí –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç."""
    await state.update_data(new_q=None if msg.text == "-" else msg.text.strip())
    await state.set_state(FaqStates.EditA)

    data = await state.get_data()
    old_q = cursor.execute(
        "SELECT question FROM faq WHERE id = ?", (data["qid"],)
    ).fetchone()[0]

    await msg.delete()

    await bot.edit_message_text(
        chat_id=msg.chat.id,
        message_id=data["msg_q_id"],
        text=(
            f"–í–æ–ø—Ä–æ—Å: {data['new_q'] or old_q}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç</b>\n(–∏–ª–∏ ¬´-¬ª, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å):"
        ),
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="–ù–∞–∑–∞–¥", callback_data=f"faq_q:{data['role']}:{data['qid']}"
                    )
                ]
            ]
        ),
    )


@dp.message(FaqStates.EditA, IsAdmin())
async def faq_edit_a(msg: types.Message, state: FSMContext) -> None:
    """–ü–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä."""
    await state.update_data(new_a=None if msg.text == "-" else msg.text.strip())
    data = await state.get_data()

    old_q, old_a = cursor.execute(
        "SELECT question, answer FROM faq WHERE id = ?", (data["qid"],)
    ).fetchone()

    new_q, new_a = data["new_q"] or old_q, data["new_a"] or old_a
    await msg.delete()

    await state.set_state(FaqStates.ConfirmEdit)
    await bot.edit_message_text(
        chat_id=msg.chat.id,
        message_id=data["msg_q_id"],
        text=f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n<b>–í–æ–ø—Ä–æ—Å:</b> {new_q}\n<b>–û—Ç–≤–µ—Ç:</b> {new_a}",
        parse_mode="HTML",
        reply_markup=confirm_edit_kb(data["role"], data["qid"]),
    )


@dp.callback_query(F.data.startswith("faq_update:"), IsAdmin())
async def faq_update(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    data = await state.get_data()
    role_code, qid_str = cb.data.split(":")[1:]
    qid = int(qid_str)

    old_q, old_a = cursor.execute(
        "SELECT question, answer FROM faq WHERE id = ?", (qid,)
    ).fetchone()

    new_q = data.get("new_q") or old_q
    new_a = data.get("new_a") or old_a

    cursor.execute(
        "UPDATE faq SET question = ?, answer = ? WHERE id = ?", (new_q, new_a, qid)
    )
    conn.commit()

    await state.set_state(FaqStates.RoleMenu)
    await cb.message.edit_text("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=role_menu_kb(role_code))
    await cb.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ!")


@dp.callback_query(F.data.startswith("faq_edit_cancel:"), IsAdmin())
async def faq_edit_cancel(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—É–Ω–∫—Ç—É FAQ."""
    _, role_code, qid = cb.data.split(":")
    await state.clear()
    await faq_open_item(cb)  # –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É–Ω–∫—Ç
    await cb.answer()


@dp.callback_query(F.data.startswith("faq_del:"), IsAdmin())
async def faq_delete(cb: types.CallbackQuery) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ FAQ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (soft-confirm –≤ Telegram)."""
    _, role_code, qid_str = cb.data.split(":")
    qid = int(qid_str)

    cursor.execute("DELETE FROM faq WHERE id = ?", (qid,))
    conn.commit()

    await cb.message.edit_text("üóë –ü—É–Ω–∫—Ç —É–¥–∞–ª—ë–Ω.", reply_markup=role_menu_kb(role_code))
    await cb.answer("–£–¥–∞–ª–µ–Ω–æ!")


# --------------------------------------------------------------------------- #
#                 4. EXCEL-–ò–ú–ü–û–†–¢ / –≠–ö–°–ü–û–†–¢  ¬´–ö–∞–Ω–¥–∏–¥–∞—Ç–∫–∞¬ª                     #
# --------------------------------------------------------------------------- #
@dp.callback_query(F.data == "faq_candidate", IsAdmin())
async def faq_cand_root(cb: types.CallbackQuery) -> None:
    """–ú–µ–Ω—é FAQ ¬´–ö–∞–Ω–¥–∏–¥–∞—Ç–∫–∞¬ª (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥ `user_unauthorized`)."""
    await cb.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ FAQ ‚Äì <b>–ö–∞–Ω–¥–∏–¥–∞—Ç–∫–∞</b>",
        parse_mode="HTML",
        reply_markup=role_menu_kb("user_unauthorized"),
    )
    await cb.answer()


@dp.callback_query(F.data == "faq_export_cand", IsAdmin())
async def faq_export_cand(cb: types.CallbackQuery) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º admin-—É Excel-—à–∞–±–ª–æ–Ω –¥–ª—è ¬´–ö–∞–Ω–¥–∏–¥–∞—Ç–∫–∏¬ª."""
    if not XL_PATH.exists():
        return await cb.answer("–§–∞–π–ª info.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    await bot.send_document(
        cb.from_user.id, types.FSInputFile(XL_PATH, filename="faq_candidate.xlsx")
    )
    await cb.answer()


@dp.callback_query(F.data == "faq_import_cand", IsAdmin())
async def faq_import_cand_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞."""
    await cb.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª, –æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞.",
        reply_markup=role_menu_kb("user_unauthorized"),
    )
    await state.set_state(FaqStates.UploadExcel)
    await cb.answer()


@dp.message(FaqStates.UploadExcel, IsAdmin(), F.document)
async def faq_handle_excel(msg: types.Message, state: FSMContext) -> None:
    """–ü—Ä–∏–Ω–∏–º–∞–µ–º Excel ‚Üí –≤–∞–ª–∏–¥–∏—Ä—É–µ–º ‚Üí –∑–∞–º–µ–Ω—è–µ–º `info.xlsx`."""
    doc = msg.document
    if not doc.file_name.lower().endswith(".xlsx"):
        return await msg.reply("–ù—É–∂–µ–Ω —Ñ–∞–π–ª *.xlsx*")

    tmp_path = Path("tmp") / f"cand_faq_{doc.file_id}.xlsx"
    tmp_path.parent.mkdir(exist_ok=True)

    await bot.download(doc, destination=tmp_path)

    # ‚îÄ‚îÄ‚îÄ –≤–∞–ª–∏–¥–∞—Ü–∏—è: ‚â•1 —Å—Ç—Ä–æ–∫–∞ –∏ ‚â•12 –∫–æ–ª–æ–Ω–æ–∫ (6 Q, 6 A) ‚îÄ‚îÄ‚îÄ
    import pandas as pd

    try:
        df = pd.read_excel(tmp_path, engine="openpyxl", header=None)
    except Exception as exc:  # pylint: disable=broad-except
        tmp_path.unlink(missing_ok=True)
        return await msg.reply(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {exc}")

    if df.shape[0] == 0 or df.shape[1] < 12:
        tmp_path.unlink(missing_ok=True)
        return await msg.reply("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω—É info.xlsx.")

    XL_PATH.parent.mkdir(parents=True, exist_ok=True)
    tmp_path.replace(XL_PATH)

    # ¬´–≥–æ—Ä—è—á–æ¬ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å, —á—Ç–æ–±—ã –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ö–≤–∞—Ç–∏–ª–∏—Å—å
    importlib.reload(info_mod)

    await state.clear()
    await msg.reply(
        f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: {df.shape[0]}",
        reply_markup=delete_this_msg(),
    )


# --------------------------------------------------------------------------- #
#                       5. –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –ü–£–ù–ö–¢–ê                             #
# --------------------------------------------------------------------------- #
@dp.callback_query(F.data.startswith("faq_create:"), IsAdmin())
async def faq_create_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–®–∞–≥ 1 ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ¬´–∫–Ω–æ–ø–∫—É¬ª (question)."""
    role_code = cb.data.split(":")[1]
    await state.update_data(role=role_code, msg_new_id=cb.message.message_id)
    await state.set_state(FaqStates.CreateQ)

    kb_back = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="–ù–∞–∑–∞–¥", callback_data=f"faq_role_back:{role_code}"
                )
            ]
        ]
    )
    await cb.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏</b> FAQ –¥–ª—è —Ä–æ–ª–∏ {ROLES[role_code]}:",
        parse_mode="HTML",
        reply_markup=kb_back,
    )
    await cb.answer()


@dp.message(FaqStates.CreateQ, IsAdmin())
async def faq_create_title(msg: types.Message, state: FSMContext) -> None:
    """–®–∞–≥ 2 ‚Äî –ø–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–≤–µ—Ç—É."""
    await state.update_data(title=msg.text.strip())
    role_code = (await state.get_data())["role"]

    await state.set_state(FaqStates.CreateA)
    await bot.edit_message_text(
        chat_id=msg.chat.id,
        message_id=(await state.get_data())["msg_new_id"],
        text="–í–≤–µ–¥–∏—Ç–µ <b>—Ç–µ–∫—Å—Ç</b> FAQ:",
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="–ù–∞–∑–∞–¥", callback_data=f"faq_role_back:{role_code}"
                    )
                ]
            ]
        ),
    )
    await msg.delete()


@dp.message(FaqStates.CreateA, IsAdmin())
async def faq_create_answer(msg: types.Message, state: FSMContext) -> None:
    """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞."""
    await state.update_data(answer=msg.text.strip())
    data = await state.get_data()

    await state.set_state(FaqStates.ConfirmCreate)
    await bot.edit_message_text(
        chat_id=msg.chat.id,
        message_id=data["msg_new_id"],
        text=(
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['title']}\n"
            f"<b>–¢–µ–∫—Å—Ç:</b> {data['answer']}"
        ),
        parse_mode="HTML",
        reply_markup=confirm_kb(data["role"]),
    )
    await msg.delete()


@dp.callback_query(F.data.startswith("faq_save:"), IsAdmin())
async def faq_save(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç FAQ."""
    data = await state.get_data()
    role_code = data["role"]

    cursor.execute(
        "INSERT INTO faq(question, answer, for_role) VALUES(?, ?, ?)",
        (data["title"], data["answer"], role_code),
    )
    conn.commit()

    await state.set_state(FaqStates.RoleMenu)
    await cb.message.edit_text("‚úÖ –ü—É–Ω–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=role_menu_kb(role_code))
    await cb.answer("FAQ –¥–æ–±–∞–≤–ª–µ–Ω!")


@dp.callback_query(F.data.startswith("faq_role_back:"), IsAdmin())
async def faq_role_back(cb: types.CallbackQuery, state: FSMContext) -> None:
    """¬´–ù–∞–∑–∞–¥¬ª –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫ –º–µ–Ω—é —Ä–æ–ª–∏."""
    role_code = cb.data.split(":")[1]
    await state.set_state(FaqStates.RoleMenu)
    await cb.message.edit_text(
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ FAQ ‚Äì <b>{ROLES[role_code]}</b>",
        parse_mode="HTML",
        reply_markup=role_menu_kb(role_code),
    )
    await cb.answer()
