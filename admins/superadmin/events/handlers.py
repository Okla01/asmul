"""
Handlers for the ‚ÄúEvents‚Äù block in the Super-Admin panel.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
-----------
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö / —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (–ø–∞–≥–∏–Ω–∞—Ü–∏—è).  
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–º–Ω–æ–≥–æ—à–∞–≥–æ–≤–∞—è —Ñ–æ—Ä–º–∞).  
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è / –æ–ø–∏—Å–∞–Ω–∏—è / –¥–∞—Ç—ã / –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Ç—á—ë—Ç–æ–≤.  
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ (soft-delete) –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ.  

FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –≤ `states.py`.
"""

from __future__ import annotations

from datetime import datetime, timedelta
from typing import List, Optional

from aiogram import F, types
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext

from admins.filters.is_admin import IsAdmin
from admins.superadmin.events.keyboards import (
    _human,
    confirm_delete_kb,
    deadline_kb,
    event_menu_kb,
    keep_kb,
    list_kb,
    manage_kb,
)
from admins.superadmin.events.states import EventFSM
from admins.superadmin.mailing.keyboards import confirm_kb
from config import bot, dp
from db.database import (
    conn,
    create_event,
    cursor,
    get_all_events,
    get_event_by_id,
)

# --- –æ–±—â–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ------------------------------------------------------- #
FMT_ISO = "%Y-%m-%d %H:%M:%S"       # –ë–î
FMT_RU = "%d.%m.%Y %H:%M"           # human friendly (RU)


# --------------------------------------------------------------------------- #
#                           –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï                                   #
# --------------------------------------------------------------------------- #
def _format_event(ev: dict) -> str:
    """
    –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.

    Parameters
    ----------
    ev : dict
        –°—Ç—Ä–æ–∫–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `events`.
    """
    deadline_part = (
        f"\n‚è∞ <i>–¥–æ {_human(ev.get('report_deadline'))}</i>"
        if ev.get("report_deadline")
        else ""
    )
    return (
        f"<b>{ev.get('title')}</b>\n\n"
        f"{ev.get('description') or '‚Äî'}\n\n"
        f"üìÖ <i>{_human(ev.get('event_date'))}</i>{deadline_part}"
    )


async def _send_event_card(
    message: types.Message,
    ev: dict,
    state: FSMContext,
    *,
    replace_msg: bool = True,
) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.

    If ``replace_msg`` is True ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
    –∏–Ω–∞—á–µ —à–ª—ë—Ç –Ω–æ–≤–æ–µ –ø–æ–¥ –Ω–∏–º.
    """
    text = _format_event(ev)
    kb = event_menu_kb(ev["id"], ev["status"] == "deleted")

    if replace_msg:
        await message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    else:
        await message.answer(text, parse_mode="HTML", reply_markup=kb)

    await state.set_state(EventFSM.EventMenu)
    await state.update_data(ev_id=ev["id"])


def _update_event_field(ev_id: int, field: str, val: str) -> None:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è —Å–æ–±—ã—Ç–∏—è.

    NB: –ø–æ–ª–µ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è *–∏–∑ –∫–æ–¥–∞*, –∞ –Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å SQL-–∏–Ω—ä–µ–∫—Ü–∏–∏. –ó–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.
    """
    assert field in {"title", "description", "event_date"}  # safety-net
    cursor.execute(f"UPDATE events SET {field} = ? WHERE id = ?", (val, ev_id))
    conn.commit()


def _parse_dt(dt_str: str) -> datetime:
    """–ü—Ä–æ–±—É–µ—Ç ISO –∏ RU-—Ñ–æ—Ä–º–∞—Ç—ã, –∏–Ω–∞—á–µ –±—Ä–æ—Å–∞–µ—Ç ValueError."""
    for fmt in (FMT_ISO, FMT_RU):
        try:
            return datetime.strptime(dt_str, fmt)
        except ValueError:
            continue
    raise ValueError("bad date string")


# --------------------------------------------------------------------------- #
#                        –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ (¬´–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è¬ª)                          #
# --------------------------------------------------------------------------- #
@dp.callback_query(F.data == "sa_events", IsAdmin())
async def ev_manage_main(cb: types.CallbackQuery, state: FSMContext) -> None:
    await state.set_state(EventFSM.SelectAction)
    await cb.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏:", reply_markup=manage_kb())
    await cb.answer()


@dp.callback_query(EventFSM.SelectAction, F.data.startswith("ev_list:"), IsAdmin())
async def ev_list(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ (–ø–æ —Å—Ç–∞—Ç—É—Å—É) + –ø–∞–≥–∏–Ω–∞—Ü–∏—è."""
    _, page_s, status = cb.data.split(":")
    page = int(page_s)
    events = get_all_events(status)

    await state.set_state(EventFSM.ListEvents)
    await state.update_data(events=events, status=status)

    lines: List[str] = [
        f"‚Ä¢ {_human(ev['event_date'])} ‚Äî <b>{ev['title']}</b>" for ev in events
    ]
    header = "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:" if status == "deleted" else "–ê–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:"
    await cb.message.edit_text(
        header + "\n" + "\n".join(lines),
        parse_mode="HTML",
        reply_markup=list_kb(events, page, status),
    )
    await cb.answer()


# --- ¬´–ù–∞–∑–∞–¥¬ª –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–æ—á–µ–∫ ------------------------------------------------ #
@dp.callback_query(F.data.in_({"ev_back_trash", "ev_back_main"}), IsAdmin())
async def ev_back_to_root(cb: types.CallbackQuery, state: FSMContext) -> None:
    await state.set_state(EventFSM.SelectAction)
    await cb.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏:", reply_markup=manage_kb())
    await cb.answer()


# --------------------------------------------------------------------------- #
#                      –ö–ê–†–¢–û–ß–ö–ê / –£–î–ê–õ–ï–ù–ò–ï / –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï                   #
# --------------------------------------------------------------------------- #
@dp.callback_query(EventFSM.ListEvents, F.data.startswith("ev_open:"), IsAdmin())
async def ev_open(cb: types.CallbackQuery, state: FSMContext) -> None:
    ev_id = int(cb.data.split(":")[1])
    ev = get_event_by_id(ev_id)
    if not ev:
        return await cb.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)

    await _send_event_card(cb.message, ev, state)
    await cb.answer()


@dp.callback_query(EventFSM.EventMenu, F.data.startswith("ev_del_confirm:"), IsAdmin())
async def ev_del_confirm(cb: types.CallbackQuery) -> None:
    ev_id = int(cb.data.split(":")[1])
    await cb.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?",
        reply_markup=confirm_delete_kb(ev_id),
    )
    await cb.answer()


@dp.callback_query(F.data.startswith("ev_delete:"), IsAdmin())
async def ev_delete(cb: types.CallbackQuery, state: FSMContext) -> None:
    ev_id = int(cb.data.split(":")[1])
    cursor.execute("UPDATE events SET status = 'deleted' WHERE id = ?", (ev_id,))
    conn.commit()

    await cb.message.edit_text("üóë –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É.", reply_markup=manage_kb())
    await state.set_state(EventFSM.SelectAction)
    await cb.answer()


@dp.callback_query(F.data.startswith("ev_restore:"), IsAdmin())
async def ev_restore(cb: types.CallbackQuery, state: FSMContext) -> None:
    ev_id = int(cb.data.split(":")[1])
    cursor.execute(
        "UPDATE events SET status = 'active', report_deadline = NULL WHERE id = ?",
        (ev_id,),
    )
    conn.commit()

    await cb.message.edit_text("‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=manage_kb())
    await state.set_state(EventFSM.SelectAction)
    await cb.answer()


@dp.callback_query(F.data.startswith("ev_back_list"), IsAdmin())
async def ev_back_list(cb: types.CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    events = data.get("events") or get_all_events()
    status = data.get("status", "active")

    await state.set_state(EventFSM.ListEvents)
    await cb.message.edit_text(
        "–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
        reply_markup=list_kb(events, 0, status),
    )
    await cb.answer()


# --------------------------------------------------------------------------- #
#                          –°–û–ó–î–ê–ù–ò–ï   (–º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ)                           #
# --------------------------------------------------------------------------- #
@dp.callback_query(EventFSM.SelectAction, F.data == "ev_create_start", IsAdmin())
async def ev_start_create(cb: types.CallbackQuery, state: FSMContext) -> None:
    await state.set_state(EventFSM.CreateTitle)
    await state.update_data(events_create_msg_id=cb.message.message_id)

    await cb.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="ev_back_main")]]
        ),
    )
    await cb.answer()


@dp.message(EventFSM.CreateTitle, IsAdmin())
async def ev_create_title(msg: types.Message, state: FSMContext) -> None:
    await state.update_data(new_title=msg.text.strip())

    data = await state.get_data()
    await bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ</b> –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        chat_id=msg.chat.id,
        message_id=data["events_create_msg_id"],
        parse_mode="HTML",
    )
    await state.set_state(EventFSM.CreateDesc)
    await msg.delete()


@dp.message(EventFSM.CreateDesc, IsAdmin())
async def ev_create_desc(msg: types.Message, state: FSMContext) -> None:
    await state.update_data(new_desc=msg.text.strip())

    data = await state.get_data()
    await bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ <b>–¥–∞—Ç—É</b> –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>DD.MM.YYYY HH:MM</code>:",
        chat_id=msg.chat.id,
        message_id=data["events_create_msg_id"],
        parse_mode="HTML",
    )
    await state.set_state(EventFSM.CreateDate)
    await msg.delete()


@dp.message(EventFSM.CreateDate, IsAdmin())
async def ev_create_date(msg: types.Message, state: FSMContext) -> None:
    date_str = msg.text.strip()
    try:
        dt = datetime.strptime(date_str, "%d.%m.%Y %H:%M")
    except ValueError:
        return await msg.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    await state.update_data(new_date=dt.strftime(FMT_ISO))
    data = await state.get_data()

    preview = (
        f"<b>{data['new_title']}</b>\n"
        f"{data['new_desc']}\n"
        f"üìÖ <i>{date_str}</i>"
    )
    await bot.edit_message_text(
        chat_id=msg.chat.id,
        message_id=data["events_create_msg_id"],
        text=f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n{preview}",
        parse_mode="HTML",
        reply_markup=confirm_kb(),
    )
    await state.set_state(EventFSM.ConfirmCreate)
    await msg.delete()


@dp.callback_query(EventFSM.ConfirmCreate, F.data == "ml_send", IsAdmin())
async def ev_save(cb: types.CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    ev_id = create_event(data["new_title"], data["new_desc"], data["new_date"])

    if not ev_id:
        return await cb.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.", show_alert=True)

    await state.clear()
    await cb.message.edit_text("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ ‚úÖ", reply_markup=manage_kb())
    await cb.answer()


@dp.callback_query(EventFSM.ConfirmCreate, F.data == "ml_cancel", IsAdmin())
async def ev_create_cancel(cb: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await cb.message.edit_text("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=manage_kb())
    await cb.answer()


# --------------------------------------------------------------------------- #
#                              –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï                                 #
# --------------------------------------------------------------------------- #
@dp.callback_query(EventFSM.EventMenu, F.data.startswith("ev_edit_title:"), IsAdmin())
async def ev_edit_title_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    await state.set_state(EventFSM.EditTitle)
    await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b>:", parse_mode="HTML", reply_markup=keep_kb)
    await cb.answer()


@dp.message(EventFSM.EditTitle, IsAdmin())
async def ev_edit_title_save(msg: types.Message, state: FSMContext) -> None:
    ev_id = (await state.get_data())["ev_id"]
    _update_event_field(ev_id, "title", msg.text.strip())

    await _send_event_card(msg, get_event_by_id(ev_id), state, replace_msg=False)
    await msg.delete()


@dp.callback_query(EventFSM.EventMenu, F.data.startswith("ev_edit_desc:"), IsAdmin())
async def ev_edit_desc_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    await state.set_state(EventFSM.EditDesc)
    await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ</b>:", parse_mode="HTML", reply_markup=keep_kb)
    await cb.answer()


@dp.message(EventFSM.EditDesc, IsAdmin())
async def ev_edit_desc_save(msg: types.Message, state: FSMContext) -> None:
    ev_id = (await state.get_data())["ev_id"]
    _update_event_field(ev_id, "description", msg.text.strip())

    await _send_event_card(msg, get_event_by_id(ev_id), state, replace_msg=False)
    await msg.delete()


@dp.callback_query(EventFSM.EventMenu, F.data.startswith("ev_edit_date:"), IsAdmin())
async def ev_edit_date_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    await state.set_state(EventFSM.EditDate)
    await cb.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>DD.MM.YYYY HH:MM</code>:",
        parse_mode="HTML",
        reply_markup=keep_kb,
    )
    await cb.answer()


@dp.message(EventFSM.EditDate, IsAdmin())
async def ev_edit_date_save(msg: types.Message, state: FSMContext) -> None:
    try:
        dt = datetime.strptime(msg.text.strip(), "%d.%m.%Y %H:%M")
    except ValueError:
        return await msg.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    ev_id = (await state.get_data())["ev_id"]
    _update_event_field(ev_id, "event_date", dt.strftime(FMT_ISO))

    await _send_event_card(msg, get_event_by_id(ev_id), state, replace_msg=False)
    await msg.delete()


# --------------------------------------------------------------------------- #
#                           –î–ï–î–õ–ê–ô–ù–´  –û–¢–ß–Å–¢–û–í                                 #
# --------------------------------------------------------------------------- #
@dp.callback_query(EventFSM.EventMenu, F.data.startswith("ev_edit_deadline:"), IsAdmin())
async def ev_deadline_menu(cb: types.CallbackQuery) -> None:
    ev_id = int(cb.data.split(":")[1])
    await cb.message.edit_text("–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Å–±–æ—Ä –æ—Ç—á—ë—Ç–æ–≤ —á–µ—Ä–µ–∑ ‚Ä¶", reply_markup=deadline_kb(ev_id))
    await cb.answer()


@dp.callback_query(F.data.startswith("ev_set_deadline:"), IsAdmin())
async def ev_set_deadline(cb: types.CallbackQuery, state: FSMContext) -> None:
    _, ev_id_s, hours_s = cb.data.split(":")
    ev_id, hours = int(ev_id_s), int(hours_s)

    ev = get_event_by_id(ev_id)
    if not ev:
        return await cb.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)

    if hours == 0:
        cursor.execute("UPDATE events SET report_deadline = NULL WHERE id = ?", (ev_id,))
        text = "–°—Ä–æ–∫ —Å–±–æ—Ä–∞ –æ—Ç—á—ë—Ç–æ–≤ —É–¥–∞–ª—ë–Ω."
    else:
        base = _parse_dt(ev["event_date"])
        deadline_iso = (base + timedelta(hours=hours)).strftime(FMT_ISO)
        cursor.execute("UPDATE events SET report_deadline = ? WHERE id = ?", (deadline_iso, ev_id))
        text = f"–û—Ç—á—ë—Ç—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –¥–æ: {_human(deadline_iso)}"

    conn.commit()
    await _send_event_card(cb.message, get_event_by_id(ev_id), state, replace_msg=True)
    await cb.answer(text)


# --- ¬´–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ¬ª –Ω–∞ —ç—Ç–∞–ø–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---------------------------- #
@dp.callback_query(F.data == "ev_keep", IsAdmin())
async def ev_keep_field(cb: types.CallbackQuery, state: FSMContext) -> None:
    ev_id = (await state.get_data())["ev_id"]
    await _send_event_card(cb.message, get_event_by_id(ev_id), state)
    await cb.answer()
