from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from db.database import get_user_role, set_user_role, get_user_registrations
from config import report_questions_from_candidates_chat_id

from admins.registration.states import AdminRegistration
from admins.keyboards import get_practice_supervisor_panel_kb, get_admin_panel_kb, get_superadmin_panel_kb
from admins.practice_supervisor.registration.keyboards import get_ps_register_kb

router = Router()

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–æ–ª–µ–π
ROLE_COMMANDS = {
    "supervisor": "admin_supervisor",
    "admin": "admin_admin",
    "practice": "admin_practice_supervisor"
}

@router.message(Command(commands=list(ROLE_COMMANDS.keys())))
async def role_command(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ /admin, /supervisor, /practice –∏ –¥—Ä."""
    user_id = message.from_user.id
    command = message.text.lstrip("/")          # –±–µ–∑ —Å–ª—ç—à–∞

    # üëâ 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å
    current_role = get_user_role(user_id)
    if current_role == ROLE_COMMANDS[command]:
        await open_role_panel(message, current_role)
        return

    # üëâ 2. –ï—Å—Ç—å –ª–∏ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≠–¢–£ —Ä–æ–ª—å?
    registrations = get_user_registrations(user_id)
    pending_registrations = [
        reg for reg in registrations
        if reg["status"] == "pending" and reg["target_role"] == ROLE_COMMANDS[command]
    ]
    if pending_registrations:
        await message.answer(
            f"‚ùó –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é {command}.\n"
            "–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
        )
        return

    # üëâ 3. –°–ø–µ—Ü-–ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è /practice ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–º–µ—Å—Ç–æ –∑–∞–ø—Ä–æ—Å–∞ –§–ò–û
    if command == "practice":
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–æ–ª–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏.\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É:",
            reply_markup=get_ps_register_kb(),
        )
        return

    # üëâ 4. –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –§–ò–û
    await state.set_state(AdminRegistration.WaitingForFIO)
    await state.update_data(target_role=ROLE_COMMANDS[command])

    await message.answer(
        "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –§–ò–û:\n"
        "(–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ)"
    )


async def open_role_panel(message: Message, role: str):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏."""
    if role == "admin_practice_supervisor":
        await message.answer(
            "–ü–∞–Ω–µ–ª—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏",
            reply_markup=get_practice_supervisor_panel_kb()
        )
    elif role == "admin_admin":
        await message.answer(
            "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞",
            reply_markup=get_admin_panel_kb()
        )
    elif role == "admin_supervisor":
        await message.answer(
            "–ü–∞–Ω–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞",
            reply_markup=get_superadmin_panel_kb()
        )
    else:
        await message.answer(
            "‚ùå –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –≤–∞—à–∞ —Ä–æ–ª—å: user_unauthorized"
        )
