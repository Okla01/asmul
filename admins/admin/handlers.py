"""
–•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ä–æ–ª–∏ ¬´–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä¬ª (admin).

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
1. –ü—Ä–æ—Å–º–æ—Ç—Ä FAQ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
2. –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞–º –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.
3. –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏—Ü—ã –ø–æ –§–ò–û —á–µ—Ä–µ–∑ inline-query –∏ –≤—ã–≤–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–∏.
"""

from __future__ import annotations

import asyncio
from typing import Final, Optional

from aiogram import F, html, types
from aiogram.exceptions import (
    TelegramAPIError,
    TelegramBadRequest,
    TelegramForbiddenError,
)
from aiogram.fsm.context import FSMContext
from aiogram.types import InputMediaPhoto, InputTextMessageContent, InlineQueryResultArticle
from aiogram.utils.keyboard import InlineKeyboardBuilder

from admins.admin.keyboards import (
    build_faq_page_kb,
    back_to_menu_a_kb,
    get_sa_reply_kb,
)
from admins.admin.states import AskSAForm, SAReplyForm, AParticipantSearch
from admins.filters.is_admin import IsAdmin
from admins.keyboards import get_admin_panel_kb
from admins.utils import build_admin_card_text
from config import (
    dp,
    bot,
    report_questions_from_admins_chat_id,
    ROLES,
)
from db.database import (
    get_participant_card,
    get_photo_or_none,
    get_user_role,
    load_faq_from_db,
    search_users_by_fio,
)
from user.auth.keyboards import delete_this_msg_kb

# --------------------------------------------------------------------------- #
#                            1. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é                                  #
# --------------------------------------------------------------------------- #


@dp.callback_query(F.data == "a_menu", IsAdmin())
async def back_to_admin_menu(cb: types.CallbackQuery) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    await cb.message.edit_text("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞", reply_markup=get_admin_panel_kb())
    await cb.answer()


# --------------------------------------------------------------------------- #
#                               2. FAQ                                        #
# --------------------------------------------------------------------------- #

_FAQ_EMPTY_MSG: Final = "FAQ –ø—É—Å—Ç–æ–π"


@dp.callback_query(F.data == "a_faq", IsAdmin())
async def open_faq(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É FAQ."""
    faq_data = load_faq_from_db(cb.from_user.id)
    if not faq_data:
        return await cb.answer(_FAQ_EMPTY_MSG, show_alert=True)

    kb = build_faq_page_kb(faq_data, page=0)
    await cb.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç:",
        reply_markup=kb,
    )
    await cb.answer()


@dp.callback_query(F.data.startswith("afaq_page:"), IsAdmin())
async def paginate_faq(cb: types.CallbackQuery) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü FAQ (‚óÄÔ∏è 1/10 ‚ñ∂Ô∏è)."""
    faq_data = load_faq_from_db(cb.from_user.id)
    if not faq_data:
        return await cb.answer(_FAQ_EMPTY_MSG, show_alert=True)

    page: int = int(cb.data.split(":")[1])
    kb = build_faq_page_kb(faq_data, page)
    await cb.message.edit_reply_markup(reply_markup=kb)
    await cb.answer()


@dp.callback_query(F.data.startswith("afaq_q:"), IsAdmin())
async def show_answer(cb: types.CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å.

    callback-data —Ñ–æ—Ä–º–∞—Ç–∞: "afaq_q:{q_id}:{page}"
    """
    _, q_id_str, page_str = cb.data.split(":")
    q_id: int = int(q_id_str)
    page: int = int(page_str)

    faq_data = load_faq_from_db(cb.from_user.id)
    answer_item = next((i for i in faq_data if i["id"] == q_id), None)
    if not answer_item:
        return await cb.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

    text = f"<b>{answer_item['question']}</b>\n\n{answer_item['answer']}"

    kb = InlineKeyboardBuilder()
    kb.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ FAQ", callback_data=f"afaq_page:{page}")
    kb.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="a_menu")
    await cb.message.edit_text(text, reply_markup=kb.adjust(1).as_markup(), parse_mode="HTML")
    await cb.answer()


# --------------------------------------------------------------------------- #
#                 3. ¬´–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞–º¬ª                             #
# --------------------------------------------------------------------------- #


@dp.callback_query(F.data == "a_ask", IsAdmin())
async def ask_sa_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∏–Ω–∞–µ–º FSM: –∞–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç –≤–æ–ø—Ä–æ—Å."""
    await state.set_state(AskSAForm.WaitingForQuestion)
    await state.update_data(main_msg_id=cb.message.message_id)

    await cb.message.edit_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–≤:",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="a_cancel_q")]]
        ),
    )
    await cb.answer()


@dp.callback_query(F.data == "a_cancel_q", AskSAForm.WaitingForQuestion, IsAdmin())
async def ask_sa_cancel(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞."""
    await state.clear()
    await cb.message.edit_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_admin_panel_kb())
    await cb.answer()


@dp.message(AskSAForm.WaitingForQuestion, IsAdmin())
async def process_sa_question(msg: types.Message, state: FSMContext) -> None:
    """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É –°–ê."""
    await state.clear()

    admin = msg.from_user
    q_text: str = msg.text or ""

    admin_info = html.quote(admin.full_name)
    if admin.username:
        admin_info += f" (@{admin.username})"
    admin_info += f"\nID: {admin.id}"

    role_code = get_user_role(admin.id)
    role_text = ROLES.get(role_code, role_code)

    header = f"‚ùì <b>–í–æ–ø—Ä–æ—Å –æ—Ç ¬´{role_text}¬ª</b>\n\n{admin_info}\n\n"
    base_text = f"{header}<b>–í–æ–ø—Ä–æ—Å:</b>\n{html.quote(q_text)}"

    # ‚ñ∏ –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–ª–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
    extra = ""
    try:
        await bot.forward_message(
            chat_id=report_questions_from_admins_chat_id,
            from_chat_id=msg.chat.id,
            message_id=msg.message_id,
        )
    except TelegramForbiddenError:
        extra = "\n\n‚ö†Ô∏è <i>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª (–∞–¥–º–∏–Ω –∑–∞–ø—Ä–µ—Ç–∏–ª –ø–µ—Ä–µ—Å—ã–ª–∫—É).</i>"
    except Exception as exc:  # pylint: disable=broad-except
        extra = f"\n\n‚ùóÔ∏è <i>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {exc}</i>"

    await bot.send_message(
        chat_id=report_questions_from_admins_chat_id,
        text=base_text + extra,
        parse_mode="HTML",
        reply_markup=get_sa_reply_kb(admin.id),
    )

    # ‚ñ∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    data = await state.get_data()
    main_msg_id: Optional[int] = data.get("main_msg_id")
    if main_msg_id:
        await bot.edit_message_text(
            chat_id=msg.chat.id,
            message_id=main_msg_id,
            text="–°–ø–∞—Å–∏–±–æ! –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
            reply_markup=get_admin_panel_kb(),
        )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ—Ç–≤–µ—Ç –°–ê –Ω–∞ –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #


@dp.callback_query(F.data.startswith("sa_reply_"), IsAdmin())
async def sa_start_reply(cb: types.CallbackQuery, state: FSMContext) -> None:
    """
    –°—É–ø–µ—Ä–∞–¥–º–∏–Ω –Ω–∞–∂–∞–ª ¬´‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å¬ª –ø–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º ‚Üí –Ω–∞—á–∏–Ω–∞–µ–º FSM.

    callback-data: "sa_reply_{admin_id}"
    """
    sa_user = cb.from_user
    admin_id: int = int(cb.data.split("_")[2])

    await state.set_state(SAReplyForm.WaitingForReplyText)
    await state.update_data(
        target_admin_id=admin_id,
        group_msg_id=cb.message.message_id,
        original_text=cb.message.text,
    )

    sa_info = html.quote(sa_user.full_name)
    if sa_user.username:
        sa_info += f" (@{sa_user.username})"

    await cb.message.edit_text(
        f"{cb.message.text}\n\n‚è≥ <b>{sa_info}</b> –ø–∏—à–µ—Ç –æ—Ç–≤–µ—Ç...",
        parse_mode="HTML",
    )
    await cb.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç.")


@dp.message(SAReplyForm.WaitingForReplyText, IsAdmin())
async def sa_process_reply(msg: types.Message, state: FSMContext) -> None:
    """–ü—Ä–∏–Ω–∏–º–∞–µ–º –æ—Ç–≤–µ—Ç —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É."""
    if msg.chat.id != report_questions_from_admins_chat_id:
        # –ø—Ä–∏–Ω–∏–º–∞–µ–º –æ—Ç–≤–µ—Ç—ã –¢–û–õ–¨–ö–û –∏–∑ –≥—Ä—É–ø–ø—ã —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–≤
        return

    data = await state.get_data()
    admin_id: int = data["target_admin_id"]
    group_msg_id: int = data["group_msg_id"]
    original_text: str = data["original_text"]

    sa = msg.from_user
    answer: str = msg.text or ""

    # 1) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    try:
        await bot.send_message(
            chat_id=admin_id,
            text=f"‚úâÔ∏è –û—Ç–≤–µ—Ç –æ—Ç —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ ({html.quote(sa.full_name)}):\n\n"
            f"{html.quote(answer)}",
            parse_mode="HTML",
            reply_markup=delete_this_msg_kb,
        )
        delivered = True
    except TelegramForbiddenError:
        delivered = False

    # 2) —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
    sa_info = html.quote(sa.full_name)
    if sa.username:
        sa_info += f" (@{sa.username})"

    final_text = (
        f"{original_text}\n\n"
        f"‚úÖ <b>–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:</b>\n{html.quote(answer)}\n\n"
        f"üë§ <b>–û—Ç–≤–µ—Ç–∏–ª:</b> {sa_info}"
    )
    if not delivered:
        final_text += (
            "\n\n<tg-spoiler>"
            "‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–∫—Ä—ã–ª –õ–°)."
            "</tg-spoiler>"
        )

    await bot.edit_message_text(
        chat_id=report_questions_from_admins_chat_id,
        message_id=group_msg_id,
        text=final_text,
        parse_mode="HTML",
    )

    await state.clear()


# --------------------------------------------------------------------------- #
#                        4. –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏—Ü—ã –ø–æ –§–ò–û                            #
# --------------------------------------------------------------------------- #


@dp.callback_query(F.data == "a_participants", IsAdmin())
async def start_fio_search(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–í—ã–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫—É ¬´üîç –ù–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏—Ü—É¬ª –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º inline-–ø–æ–∏—Å–∫–∞."""
    await state.set_state(AParticipantSearch.WaitingInline)
    await state.update_data(prompt_msg_id=cb.message.message_id)

    kb = InlineKeyboardBuilder()
    kb.button(text="üîç –ù–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏—Ü—É", switch_inline_query_current_chat="fio: ")
    kb.button(text="üîô –í –º–µ–Ω—é", callback_data="a_menu")

    await cb.message.edit_text(
        "–ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏—Ü—É¬ª –∏ –Ω–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –§–ò–û.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞.",
        reply_markup=kb.adjust(1).as_markup(),
        parse_mode="HTML",
    )
    await cb.answer()


@dp.message(AParticipantSearch.WaitingInline, F.text.startswith("#UID"), IsAdmin())
async def handle_uid_message(msg: types.Message, state: FSMContext) -> None:
    """–ê–¥–º–∏–Ω –ø—Ä–∏—Å–ª–∞–ª ¬´#UID123¬ª ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —É—á–∞—Å—Ç–Ω–∏—Ü—ã + —Ñ–æ—Ç–æ."""
    try:
        user_id: int = int(msg.text[4:])
    except ValueError:
        return  # –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    data = await state.get_data()
    prompt_id: Optional[int] = data.get("prompt_msg_id")

    # 1) –∫–∞—Ä—Ç–æ—á–∫–∞ —É—á–∞—Å—Ç–Ω–∏—Ü—ã
    card = get_participant_card(user_id)
    if not card:
        return await msg.answer("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏—Ü—ã")

    caption: str = build_admin_card_text(card)

    # 2) –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    kb = InlineKeyboardBuilder()
    kb.row(
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="a_participants"),
        types.InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="a_menu"),
    )
    reply_markup = kb.as_markup()

    # 3) —Ñ–æ—Ç–æ (file_id | FSInputFile | None)
    photo_obj = get_photo_or_none(card)

    # 4) —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º ¬´—Å—Ç–∞—Ä–æ–µ¬ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —à–ª—ë–º –Ω–æ–≤–æ–µ
    try:
        if prompt_id and photo_obj:
            await bot.edit_message_media(
                chat_id=msg.chat.id,
                message_id=prompt_id,
                media=InputMediaPhoto(
                    media=photo_obj, caption=caption, parse_mode="HTML"
                ),
                reply_markup=reply_markup,
            )
        elif prompt_id:
            await bot.edit_message_text(
                chat_id=msg.chat.id,
                message_id=prompt_id,
                text=caption,
                parse_mode="HTML",
                reply_markup=reply_markup,
            )
        else:
            raise TelegramBadRequest  # –∑–∞—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–π—Ç–∏ –≤ except
    except TelegramBadRequest:
        # –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å (–∏–ª–∏ prompt_id –Ω–µ—Ç)
        if photo_obj:
            await bot.send_photo(
                chat_id=msg.chat.id,
                photo=photo_obj,
                caption=caption,
                parse_mode="HTML",
                reply_markup=reply_markup,
            )
        else:
            await msg.answer(caption, parse_mode="HTML", reply_markup=reply_markup)
    except TelegramAPIError as exc:
        # –ª—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ TG
        print(f"[admin UID handler] telegram error: {exc}")
        await msg.answer(caption, parse_mode="HTML", reply_markup=reply_markup)

    # 5) —É–¥–∞–ª—è–µ–º ¬´#UID‚Ä¶¬ª —Å–æ–æ–±—â–µ–Ω–∏–µ-–º–µ—Ç–∫—É
    with contextlib.suppress(TelegramAPIError):
        await msg.delete()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ inline-query –ø–æ–∏—Å–∫ –§–ò–û ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


@dp.inline_query(AParticipantSearch.WaitingInline, IsAdmin())
async def inline_fio(query: types.InlineQuery) -> None:
    text: str = query.query.lstrip()

    # —É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "fio:" (—Ä–µ–≥–∏—Å—Ç—Ä –Ω–µ –≤–∞–∂–µ–Ω)
    if text.lower().startswith("fio:"):
        text = text[4:].lstrip()

    if len(text) < 2:
        return await query.answer([], cache_time=1)

    users = search_users_by_fio(text, limit=25)
    if not users:
        return await query.answer(
            [],
            cache_time=1,
            switch_pm_text="–ù–µ –Ω–∞–π–¥–µ–Ω–æ",
            switch_pm_parameter="fio_not_found",
        )

    results: list[InlineQueryResultArticle] = [
        InlineQueryResultArticle(
            id=str(u["id"]),
            title=u["full_name"],
            description=f"–¢–∏–∫: {u['tik']}",
            input_message_content=InputTextMessageContent(message_text=f"#UID{u['id']}"),
        )
        for u in users
    ]
    await query.answer(results, cache_time=1)


# --------------------------------------------------------------------------- #
#                   5. –ü–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–æ —Ü–∏–∫–ª—É (ucard)                       #
# --------------------------------------------------------------------------- #


@dp.callback_query(F.data.startswith("ucard:"), IsAdmin())
async def show_cycle_card(cb: types.CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑ –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —É—á–∞—Å—Ç–Ω–∏—Ü—ã (–≤ —Ç–æ–º —á–∏—Å–ª–µ –∏–∑ inline-—Ä–µ–∂–∏–º–∞).

    callback-data: "ucard:{uid}:{cycle}"
    """
    _, uid_str, cycle_str = cb.data.split(":")  # cycle –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
    uid: int = int(uid_str)

    card = get_participant_card(uid)
    if not card:
        return await cb.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—É —É—á–∞—Å—Ç–Ω–∏—Ü—ã", show_alert=True)

    caption = build_admin_card_text(card)
    photo_id = get_photo_or_none(card)

    kb = back_to_menu_a_kb()

    try:
        if photo_id:
            if cb.message:  # –æ–±—ã—á–Ω—ã–π —á–∞—Ç
                await cb.message.answer_photo(
                    photo=photo_id, caption=caption, parse_mode="HTML", reply_markup=kb
                )
            else:  # inline-—Å–æ–æ–±—â–µ–Ω–∏–µ
                await cb.bot.edit_message_media(
                    inline_message_id=cb.inline_message_id,
                    media=types.InputMediaPhoto(
                        media=photo_id, caption=caption, parse_mode="HTML"
                    ),
                    reply_markup=kb,
                )
        else:
            if cb.message:
                await cb.message.edit_text(caption, parse_mode="HTML", reply_markup=kb)
            else:
                await cb.bot.edit_message_text(
                    inline_message_id=cb.inline_message_id,
                    text=caption,
                    parse_mode="HTML",
                    reply_markup=kb,
                )
    except TelegramBadRequest:
        # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await cb.message.answer(caption, parse_mode="HTML", reply_markup=kb)

    await cb.answer()
