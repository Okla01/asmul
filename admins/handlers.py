"""
–•—ç–Ω–¥–ª–µ—Ä—ã –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.

–°–æ–¥–µ—Ä–∂–∏—Ç:
* –≤—Ö–æ–¥ –≤ –ø–∞–Ω–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ (`/admin`);
* –≤—ã–±–æ—Ä –∏ —Å–º–µ–Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π (`set_my_role`, callback `setrole:*`);
* —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ‚Äì —ç–∫—Å–ø–æ—Ä—Ç –∏ –∏–º–ø–æ—Ä—Ç Excel-—Ñ–∞–π–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–∫–∞ chat_id,
  –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Ç. –¥.
"""

from __future__ import annotations

import asyncio
import os
import shutil
import sys
from pathlib import Path
from typing import Final, Optional

from aiogram import F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import FSInputFile

from admins.filters.allowed_ids import AllowedIDs
from admins.filters.is_admin import IsAdmin
from admins.keyboards import (
    get_admin_panel_kb,
    get_import_files_kb,
    get_practice_supervisor_panel_kb,
    get_superadmin_panel_kb,
    _role_kb,
    delete_this_msg,
)
from admins.states import ImportFSM
from config import ROLES, bot, dp, IMPORT_FILES
from db.database import (
    export_candidates_zip_async,
    get_user_role,
    set_user_role,
)
from user.registration.utils.locale_to_excel import import_excel_to_db

# --------------------------------------------------------------------------- #
#                               –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï                               #
# --------------------------------------------------------------------------- #


def _role_suffix(role_code: str) -> str:
    """
    –£—Ç–∏–ª–∏—Ç–∞: –±–µ—Ä—ë–º —Ç–æ, —á—Ç–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ ¬´_¬ª (–∏–ª–∏ —Å–∞–º–æ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è –Ω–µ—Ç).

    –ü—Ä–∏–º–µ—Ä:
        >>> _role_suffix("practice_supervisor") -> "practice_supervisor"
        >>> _role_suffix("user_unauthorized")   -> "unauthorized"
    """
    if "_" not in role_code:
        return role_code
    # split(maxsplit=1) –¥–∞—ë—Ç ["user", "unauthorized"] ‚Äì –±–µ—Ä—ë–º —Ö–≤–æ—Å—Ç
    return role_code.split("_", maxsplit=1)[1]


# --------------------------------------------------------------------------- #
#                              –û–°–ù–û–í–ù–û–ï –ú–ï–ù–Æ /admin                           #
# --------------------------------------------------------------------------- #


@dp.message(Command("admin"), IsAdmin())
async def admin_entry(message: types.Message, state: FSMContext) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è ¬´–∞–¥–º–∏–Ω—Å–∫–∏—Ö¬ª —Ä–æ–ª–µ–π ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω—É–∂–Ω—É—é –ø–∞–Ω–µ–ª—å.

    * practice_supervisor  ‚Üí –ø–∞–Ω–µ–ª—å –†–ü
    * admin                ‚Üí –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    * supervisor           ‚Üí –ø–∞–Ω–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
    """
    await state.clear()

    suffix: str = _role_suffix(get_user_role(message.from_user.id) or "")
    if suffix == "practice_supervisor":
        await message.answer("–ü–∞–Ω–µ–ª—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏",
                             reply_markup=get_practice_supervisor_panel_kb())
    elif suffix == "admin":
        await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞", reply_markup=get_admin_panel_kb())
    elif suffix == "supervisor":
        await message.answer("–ü–∞–Ω–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞",
                             reply_markup=get_superadmin_panel_kb())
    # –µ—Å–ª–∏ —Ä–æ–ª—å –Ω–µ –∞–¥–º–∏–Ω—Å–∫–∞—è ‚Äì –ø—Ä–æ—Å—Ç–æ –º–æ–ª—á–∏–º, —á—Ç–æ–±—ã –≤—Ç–æ—Ä–æ–º—É —Ö—ç–Ω–¥–ª–µ—Ä—É –Ω–µ –º–µ—à–∞—Ç—å


@dp.message(Command("admin"))
async def admin_entry_show_ps_registration(
    message: types.Message, state: FSMContext
) -> None:
    """
    –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –†–ü.
    –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç **—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ö—ç–Ω–¥–ª–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç**.
    """
    await state.clear()

    suffix: str = _role_suffix(get_user_role(message.from_user.id)
                               or "user_unauthorized")
    if suffix not in ("practice_supervisor", "admin", "supervisor"):
        from admins.practice_supervisor.registration.keyboards import (
            get_ps_register_kb,
        )

        await message.answer(
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏, "
            "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:",
            reply_markup=get_ps_register_kb(),
        )


# ---------------------------- –ü–†–û–ß–ò–ï –ö–û–õ–õ–ë–≠–ö–ò ----------------------------- #


@dp.callback_query(F.data == "sa_menu")
async def sa_menu_h(cb: types.CallbackQuery) -> None:
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –º–µ–Ω—é —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞."""
    await cb.message.edit_text(
        "–ü–∞–Ω–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞", reply_markup=get_superadmin_panel_kb()
    )


@dp.message(Command("set_my_role"))
async def send_role_chooser(msg: types.Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏."""
    role = get_user_role(msg.from_user.id) or "‚Äî"
    text = (
        f"–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Ä–æ–ª—å: <b>{ROLES.get(role, role)}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ –∫–∞–∫—É—é —Ä–æ–ª—å —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è:"
    )
    await msg.answer(text, reply_markup=_role_kb(role), parse_mode="HTML")


@dp.callback_query(F.data.startswith("setrole:"))
async def change_role(cb: types.CallbackQuery) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    new_role: str = cb.data.split(":", 1)[1]
    user_id: int = cb.from_user.id

    if get_user_role(user_id) == new_role:
        await cb.answer("–≠—Ç–∞ —Ä–æ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ ‚úÖ", show_alert=True)
        return

    set_user_role(user_id, new_role)

    await cb.message.edit_text(
        f"–í–∞—à–∞ —Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: <b>{ROLES[new_role]}</b>\n\n"
        "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ—â—ë —Ä–∞–∑ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=_role_kb(new_role),
        parse_mode="HTML",
    )
    await cb.answer("–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")


# --------------------------------------------------------------------------- #
#                        –≠–ö–°–ü–û–†–¢ –∏  –ò–ú–ü–û–†–¢  Excel-–§–ê–ô–õ–û–í                      #
# --------------------------------------------------------------------------- #


class ReloadCand(StatesGroup):
    """FSM: –æ–¥–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –∂–¥—ë–º Excel —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏."""
    waiting_for_file = State()


@dp.message(Command("get_archive"), AllowedIDs())
async def cmd_get_archive(msg: types.Message) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç zip-–∞—Ä—Ö–∏–≤ —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏ (–¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞/—Ä—É—Ç–∞)."""
    zip_path: Path = await export_candidates_zip_async(bot)
    await bot.send_document(msg.chat.id, FSInputFile(zip_path))


@dp.message(Command("reload_cand"), AllowedIDs())
async def cmd_reload_translations(msg: types.Message, state: FSMContext) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ translations.xlsx."""
    await msg.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª (.xlsx) —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ üìÑ", reply_markup=delete_this_msg()
    )
    await state.set_state(ReloadCand.waiting_for_file)


@dp.message(
    ReloadCand.waiting_for_file,
    IsAdmin(),
    lambda m: (
        m.document
        and m.document.file_name
        and m.document.file_name.lower().endswith(".xlsx")
    ),
)
async def process_excel(msg: types.Message, state: FSMContext) -> None:
    """
    –ü–æ–ª—É—á–∏–ª–∏ —Ñ–∞–π–ª —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º import_excel_to_db().
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å Windows ‚Äì –≤–æ–∑–º–æ–∂–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–∞ –¥–∏—Å–∫–µ.
    """
    utils_dir: Path = Path("user", "registration", "utils")
    utils_dir.mkdir(parents=True, exist_ok=True)
    save_path: Path = utils_dir / "translations.xlsx"

    try:
        await bot.download(msg.document.file_id, destination=save_path)
    except Exception as exc:
        await msg.answer(f"‚ö†Ô∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {exc}")
        await state.clear()
        return

    # –î–æ–∂–∏–¥–∞–µ–º—Å—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ (–∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è Windows)
    for _ in range(10):  # ‚âà 1 —Å–µ–∫—É–Ω–¥–∞ –º–∞–∫—Å.
        if save_path.exists():
            break
        await asyncio.sleep(0.1)
    else:
        await msg.answer("‚ö†Ô∏è –§–∞–π–ª —Ç–∞–∫ –∏ –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –Ω–∞ –¥–∏—Å–∫–µ.")
        await state.clear()
        return

    try:
        import_excel_to_db()
    except Exception as exc:
        await msg.answer(
            f"‚ö†Ô∏è –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –Ω–æ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏: {exc}",
            reply_markup=delete_this_msg(),
        )
    else:
        await msg.answer("‚úÖ –ü–µ—Ä–µ–≤–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
                         reply_markup=delete_this_msg())

    await state.clear()


# ---------------------------- –°–õ–£–ñ–ï–ë–ù–´–ï  UTILS ----------------------------- #


@dp.message(Command("chat_id"), IsAdmin())
async def cmd_show_chat_id(msg: types.Message) -> None:
    """–í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–∏–π chat_id (—É–¥–æ–±–Ω–æ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ)."""
    await msg.answer(str(msg.chat.id), reply_markup=delete_this_msg())


# ------------------------------- /import ----------------------------------- #


@dp.message(Command("import"), AllowedIDs())
async def cmd_import(msg: types.Message, state: FSMContext) -> None:
    """–°—Ç–∞—Ä—Ç –∏–º–ø–æ—Ä—Ç–∞: –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª –∏–∑ —Å–ø–∏—Å–∫–∞."""
    await state.clear()
    await msg.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/–∑–∞–º–µ–Ω—ã:",
        reply_markup=get_import_files_kb(),
    )


@dp.callback_query(F.data.startswith("import_get:"), AllowedIDs())
async def import_get_file(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ."""
    name: str = cb.data.split(":", 1)[1]
    path: Optional[Path] = IMPORT_FILES.get(name)

    if not path or not path.exists():
        await cb.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω üö´", show_alert=True)
        return

    # 1) –æ—Ç–¥–∞—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
    await bot.send_document(cb.from_user.id, FSInputFile(path))

    # translations.xlsx –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É
    if name == "translations.xlsx":
        await cb.message.answer(
            "–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ translations.xlsx –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reload_cand"
        )
        await cb.answer()
        return

    # 2) –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–∂–∏–¥–∞–Ω–∏—é –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    await state.update_data(file_name=name)
    await state.set_state(ImportFSM.waiting_for_file)
    await cb.message.answer(
        f"üì• –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è <b>{name}</b>, —á—Ç–æ–±—ã –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞.",
        parse_mode="HTML",
        reply_markup=delete_this_msg(),
    )
    await cb.answer()


@dp.callback_query(F.data == "import_cancel", AllowedIDs())
async def import_cancel(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–º–ø–æ—Ä—Ç–∞."""
    await state.clear()
    await cb.message.delete()
    await cb.answer("–ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω—ë–Ω.")


@dp.message(ImportFSM.waiting_for_file, AllowedIDs(), lambda m: m.document)
async def import_replace_file(msg: types.Message, state: FSMContext) -> None:
    """
    –ü–æ–ª—É—á–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
    –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫—ç—à–∏/–∏–Ω–¥–µ–∫—Å—ã.
    """
    data = await state.get_data()
    name: Optional[str] = data.get("file_name")
    path: Optional[Path] = IMPORT_FILES.get(name)

    if not (name and path):
        await msg.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Ç–µ—Ä—è–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ /import –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    backup: Path = path.with_suffix(path.suffix + ".bak")
    try:
        if path.exists():
            shutil.copy2(path, backup)

        await bot.download(msg.document.file_id, path)
    except Exception as exc:
        # –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞, –µ—Å–ª–∏ –±—ã–ª
        if backup.exists():
            shutil.copy2(backup, path)
        await msg.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {exc}")
        await state.clear()
        return
    finally:
        backup.unlink(missing_ok=True)

    # ‚îÄ‚îÄ‚îÄ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–º–µ–Ω–∏ ‚îÄ‚îÄ‚îÄ
    match name:
        case "countries.xlsx":
            from user.registration.utils.countries import load_countries
            load_countries()
        case "info.xlsx":
            from user.registration.utils.info import load_info
            load_info()
        case "info_for_rag.xlsx":
            from user.registration.utils.index_faq_local import build_faiss_index
            build_faiss_index()
        case "users.xlsx":
            from admins.superadmin.utils.import_excel import import_excel_users
            import_excel_users()
        case "texts_part.xlsx":
            from user.auth.translations_loader import load_reg_translations
            load_reg_translations()
        case "practice_supervisor.xlsx":
            from admins.practice_supervisor.registration.load_supervisor import (
                load_practice_supervisors,
            )
            load_practice_supervisors()

    await msg.answer(
        f"‚úÖ –§–∞–π–ª <b>{name}</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.",
        parse_mode="HTML",
        reply_markup=delete_this_msg(),
    )
    await state.clear()


# ----------------------------- RESTART –ë–û–¢–ê ------------------------------- #


@dp.message(Command("restart"), AllowedIDs())
async def cmd_restart(msg: types.Message) -> None:
    """
    –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å Python.
    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Å–µ—Ä–≤–∏—Å-–º–µ–Ω–µ–¥–∂–µ—Ä (systemd/pm2/supervisor) –ø–æ–¥–Ω–∏–º–µ—Ç
    —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–Ω–æ–≤–æ.
    """
    await msg.answer("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    asyncio.create_task(_do_restart())


async def _do_restart() -> None:
    await asyncio.sleep(1)  # –¥–∞—Ç—å Telegram –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    os.execv(sys.executable, [sys.executable, *sys.argv])
