"""
Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏.
"""

from __future__ import annotations

from typing import List, Optional

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from db.database import get_all_departments, get_modules_by_department


def get_ps_register_kb() -> InlineKeyboardMarkup:
    """–û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ ¬´üîê –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∞–∫—Ç–∏–∫–∏¬ª."""
    return (
        InlineKeyboardBuilder()
        .button(
            text="üîê –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∞–∫—Ç–∏–∫–∏",
            callback_data="ps_register",
        )
        .as_markup()
    )


# def get_ps_request_approval_kb(request_id: int) -> InlineKeyboardMarkup:
#     """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤: ¬´–†–∞–∑—Ä–µ—à–∏—Ç—å¬ª / ¬´–û—Ç–∫–ª–æ–Ω–∏—Ç—å¬ª."""
#     return (
#         InlineKeyboardBuilder()
#         .button(text="‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data=f"ps_approve:{request_id}")
#         .button(text="üö´ –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"ps_reject:{request_id}")
#         .adjust(2)
#         .as_markup()
#     )
    
def get_ps_request_approval_kb(request_id: int) -> InlineKeyboardMarkup:
    """
    –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ –∑–∞—è–≤–∫–æ–π –†–ü –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ: ¬´–û–¥–æ–±—Ä–∏—Ç—å¬ª / ¬´–û—Ç–∫–ª–æ–Ω–∏—Ç—å¬ª.

    callback_data:
        ‚Ä¢ ps_approve:{request_id}
        ‚Ä¢ ps_reject:{request_id}
    """
    return (
        InlineKeyboardBuilder()
        .button(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",  callback_data=f"ps_approve:{request_id}")
        .button(text="üö´ –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"ps_reject:{request_id}")
        .adjust(2)
        .as_markup()
    )



def get_departments_kb(
    *,
    callback_prefix: str = "ps_dept",
    include_back: bool = False,
    back_callback: str = "ps_back",
) -> InlineKeyboardMarkup:
    """
    –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –∏–∑ –ë–î.

    callback_data: ``{callback_prefix}:{department_encoded}``
                   (':' ‚Üí '_' –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏).
    """
    kb = InlineKeyboardBuilder()
    for dept in get_all_departments():
        encoded = dept.replace(":", "_")
        kb.button(text=dept, callback_data=f"{callback_prefix}:{encoded}")
    if include_back:
        kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data=back_callback)
    return kb.adjust(1).as_markup()


def get_modules_kb_for_rp(
    *,
    department: str,
    req_id: int,
    callback_prefix: str = "ps_rp_module",
    include_back: bool = True,
    back_callback: str = "ps_module_back",
) -> InlineKeyboardMarkup:
    """
    –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –†–ü –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏.

    callback_data: ``{callback_prefix}:{req_id}:{module_encoded}``
    """
    kb = InlineKeyboardBuilder()
    for mod in get_modules_by_department(department):
        encoded = mod.replace(":", "_")
        kb.button(text=mod, callback_data=f"{callback_prefix}:{req_id}:{encoded}")
    if include_back:
        kb.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=back_callback)
    return kb.adjust(1).as_markup()
