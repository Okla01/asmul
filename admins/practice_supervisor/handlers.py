"""
Handlers for the ¬´Practice Supervisor¬ª role
===========================================

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
----------------
1. –ü—Ä–æ—Å–º–æ—Ç—Ä FAQ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
2. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞–º.
3. –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏—Ü—ã (inline) –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ä—Ç–æ—á–∫–∏.
4. –°–±–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ –ø—Ä–∞–∫—Ç–∏–∫–µ (–ó–ö–ê, –ó–ö–û, SMART-feedback, –ø—Ä–æ–ø—É—Å–∫–∏).
"""

from __future__ import annotations

import contextlib
from html import escape
from typing import Final, Optional

from aiogram import F, html, types
from aiogram.exceptions import TelegramAPIError, TelegramBadRequest, TelegramForbiddenError
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaPhoto,
    InputTextMessageContent,
    InlineQueryResultArticle,
    Message,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from admins.admin.keyboards import get_sa_reply_kb
from admins.admin.states import AskSAForm
from admins.filters.is_admin import IsAdmin
from admins.keyboards import get_practice_supervisor_panel_kb
from admins.practice_supervisor.keyboards import (
    _build_faq_page_kb,
    back_menu_p_kb,
    back_from_fb_kb,
    back_to_menu_p_kb,
    absence_kb,
    scale_kb,
)
from admins.practice_supervisor.states import PSParticipantSearch, PracticeFeedback
from admins.utils import build_admin_card_text
from config import bot, dp, report_questions_from_admins_chat_id, feedback_chat_id
from db.database import (
    load_faq_from_db,
    get_participant_card,
    get_photo_or_none,
    search_users_by_fio,
    save_practice_feedback,
    get_bool_setting,
)

# --------------------------------------------------------------------------- #
#                               1. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é                               #
# --------------------------------------------------------------------------- #


@dp.callback_query(F.data == "p_menu", IsAdmin())
async def ps_back_to_menu(cb: CallbackQuery) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –º–µ–Ω—é –†–ü."""
    await cb.message.edit_text(
        "–ü–∞–Ω–µ–ª—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏",
        reply_markup=get_practice_supervisor_panel_kb(),
    )
    await cb.answer()


# --------------------------------------------------------------------------- #
#                                    FAQ                                      #
# --------------------------------------------------------------------------- #

_FAQ_EMPTY_MSG: Final = "FAQ –ø—É—Å—Ç–æ–π"


@dp.callback_query(F.data == "p_faq", IsAdmin())
async def ps_open_faq(cb: CallbackQuery) -> None:
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É FAQ."""
    faq = load_faq_from_db(cb.from_user.id)
    if not faq:
        return await cb.answer(_FAQ_EMPTY_MSG, show_alert=True)

    await cb.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:",
        reply_markup=_build_faq_page_kb(faq, 0),
    )
    await cb.answer()


@dp.callback_query(F.data.startswith("pfaq_page:"), IsAdmin())
async def ps_paginate_faq(cb: CallbackQuery) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü FAQ."""
    faq = load_faq_from_db(cb.from_user.id)
    page: int = int(cb.data.split(":")[1])
    await cb.message.edit_reply_markup(reply_markup=_build_faq_page_kb(faq, page))
    await cb.answer()


@dp.callback_query(F.data.startswith("pfaq_q:"), IsAdmin())
async def ps_show_answer(cb: CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å.

    callback-data: ``pfaq_q:{q_id}:{page}``
    """
    _, q_id_str, page_str = cb.data.split(":")
    q_id, page = int(q_id_str), int(page_str)

    faq = load_faq_from_db(cb.from_user.id)
    item = next((i for i in faq if i["id"] == q_id), None)
    if not item:
        return await cb.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

    text = f"<b>{item['question']}</b>\n\n{item['answer']}"

    try:
        await cb.message.edit_text(
            text=text,
            reply_markup=_build_faq_page_kb(faq, page),
            parse_mode="HTML",
        )
    except TelegramBadRequest:
        # –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)
        await cb.message.delete()
        await cb.message.answer(
            text=text,
            reply_markup=_build_faq_page_kb(faq, page),
            parse_mode="HTML",
        )
    await cb.answer()


# --------------------------------------------------------------------------- #
#                    2. ¬´–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞–º¬ª                          #
# --------------------------------------------------------------------------- #


@dp.callback_query(F.data == "p_ask", IsAdmin())
async def ps_ask_start(cb: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –†–ü —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–≤."""
    await state.set_state(AskSAForm.WaitingForQuestion)
    await state.update_data(main_msg_id=cb.message.message_id, role_label="–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∞–∫—Ç–∏–∫–∏")

    cancel_kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="p_q_cancel")]]
    )
    await cb.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–≤:", reply_markup=cancel_kb)
    await cb.answer()


@dp.callback_query(F.data == "p_q_cancel", AskSAForm.WaitingForQuestion, IsAdmin())
async def ps_q_cancel(cb: CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞."""
    await state.clear()
    await cb.message.edit_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_practice_supervisor_panel_kb())
    await cb.answer()


@dp.message(AskSAForm.WaitingForQuestion, IsAdmin())
async def ps_process_question(msg: Message, state: FSMContext) -> None:
    """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–≤."""
    data = await state.get_data()
    role_label: str = data.get("role_label", "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∞–∫—Ç–∏–∫–∏")

    q_text: str = msg.text or ""
    user = msg.from_user

    header = (
        f"‚ùì <b>–í–æ–ø—Ä–æ—Å –æ—Ç ¬´{role_label}¬ª</b>\n\n"
        f"{html.quote(user.full_name)}"
        f"{f' (@{user.username})' if user.username else ''}\n"
        f"ID: {user.id}\n\n"
        f"<b>–í–æ–ø—Ä–æ—Å:</b>\n{html.quote(q_text)}"
    )

    await bot.send_message(
        chat_id=report_questions_from_admins_chat_id,
        text=header,
        parse_mode="HTML",
        reply_markup=get_sa_reply_kb(user.id),
    )

    ref: Optional[int] = data.get("main_msg_id")
    if ref:
        await bot.edit_message_text(
            "–°–ø–∞—Å–∏–±–æ! –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞–º.",
            chat_id=msg.chat.id,
            message_id=ref,
            reply_markup=get_practice_supervisor_panel_kb(),
        )
    await state.clear()


# --------------------------------------------------------------------------- #
#           3. –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏—Ü—ã (–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ä—Ç–æ—á–∫–∏, –±–µ–∑ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏)        #
# --------------------------------------------------------------------------- #


@dp.callback_query(F.data == "p_participants", IsAdmin())
async def ps_start_search(cb: CallbackQuery, state: FSMContext) -> None:
    """–ö–Ω–æ–ø–∫–∞ ¬´–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏—Ü–∞—Ö¬ª ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ inline-–ø–æ–∏—Å–∫."""
    await state.set_state(PSParticipantSearch.WaitingInline)
    await state.update_data(prompt_msg_id=cb.message.message_id)

    kb = InlineKeyboardBuilder()
    kb.button(text="üîç –ù–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏—Ü—É", switch_inline_query_current_chat="fio: ")
    kb.button(text="üîô –í –º–µ–Ω—é", callback_data="p_menu")

    try:
        await cb.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –§–ò–û —É—á–∞—Å—Ç–Ω–∏—Ü—ã:",
            reply_markup=kb.adjust(1).as_markup(),
        )
    except TelegramBadRequest:
        # –µ—Å–ª–∏ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        await cb.message.delete()
        await cb.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –§–ò–û —É—á–∞—Å—Ç–Ω–∏—Ü—ã:",
            reply_markup=kb.adjust(1).as_markup(),
        )
    await cb.answer()


@dp.message(PSParticipantSearch.WaitingInline, F.text.startswith("#UID"), IsAdmin())
async def ps_show_card(msg: Message, state: FSMContext) -> None:
    """–†–ü –ø—Ä–∏—Å–ª–∞–ª ¬´#UID123¬ª ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —É—á–∞—Å—Ç–Ω–∏—Ü—ã + —Ñ–æ—Ç–æ."""
    try:
        uid = int(msg.text[4:])
    except ValueError:
        return  # —Ñ–æ—Ä–º–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

    card = get_participant_card(uid)
    if not card:
        return await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

    text = build_admin_card_text(card)
    photo_obj = get_photo_or_none(card)
    data = await state.get_data()
    prompt_id: Optional[int] = data.get("prompt_msg_id")

    try:
        if photo_obj and prompt_id:
            await bot.edit_message_media(
                chat_id=msg.chat.id,
                message_id=prompt_id,
                media=InputMediaPhoto(media=photo_obj, caption=text, parse_mode="HTML"),
                reply_markup=back_to_menu_p_kb(),
            )
        elif prompt_id:
            await bot.edit_message_text(
                chat_id=msg.chat.id,
                message_id=prompt_id,
                text=text,
                parse_mode="HTML",
                reply_markup=back_to_menu_p_kb(),
            )
        else:
            raise TelegramBadRequest
    except TelegramBadRequest:
        # fallback ‚Äî –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if photo_obj:
            await bot.send_photo(
                chat_id=msg.chat.id,
                photo=photo_obj,
                caption=text,
                parse_mode="HTML",
                reply_markup=back_to_menu_p_kb(),
            )
        else:
            await msg.answer(text, parse_mode="HTML", reply_markup=back_to_menu_p_kb())

    with contextlib.suppress(TelegramAPIError):
        await msg.delete()


# --------------------------------------------------------------------------- #
#                4. –û–° –ø–æ —É—á–∞—Å—Ç–Ω–∏—Ü–µ (–º–Ω–æ–≥–æ—à–∞–≥–æ–≤–∞—è —Ñ–æ—Ä–º–∞)                      #
# --------------------------------------------------------------------------- #


@dp.callback_query(F.data == "p_os", IsAdmin())
async def pfb_start(cb: CallbackQuery, state: FSMContext) -> None:
    """–°—Ç–∞—Ä—Ç —Å–±–æ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–û–°)."""
    if not get_bool_setting("os_enabled", False):
        return await cb.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–±–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è.", show_alert=True)

    await state.set_state(PracticeFeedback.WaitingInline)
    await state.update_data(prompt_msg_id=cb.message.message_id)

    kb = InlineKeyboardBuilder()
    kb.button(text="üîç –ù–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏—Ü—É", switch_inline_query_current_chat="fio: ")
    kb.button(text="üîô –í –º–µ–Ω—é", callback_data="p_menu")

    await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —É—á–∞—Å—Ç–Ω–∏—Ü—ã –¥–ª—è –û–°:", reply_markup=kb.adjust(1).as_markup())
    await cb.answer()


# -------------- inline-–ø–æ–∏—Å–∫ –§–ò–û (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ –≤ –ø–æ–∏—Å–∫–µ, –∏ –≤ –û–°) ----------


@dp.inline_query(StateFilter(PracticeFeedback.WaitingInline, PSParticipantSearch.WaitingInline), IsAdmin())
async def ps_inline_fio(iq: types.InlineQuery) -> None:
    """Inline-query-–ø–æ–∏—Å–∫ –§–ò–û (—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É –†–ü)."""
    text = iq.query.strip()
    if text.lower().startswith("fio:"):
        text = text[4:].lstrip()

    if len(text) < 2:
        return await iq.answer([], cache_time=1)

    users = search_users_by_fio(
        query=text,
        limit=25,
        is_bot_user=False,
        ps_user_id=iq.from_user.id,
    )
    if not users:
        return await iq.answer([], cache_time=1, switch_pm_text="–ù–µ –Ω–∞–π–¥–µ–Ω–æ", switch_pm_parameter="not_found")

    results: list[InlineQueryResultArticle] = [
        InlineQueryResultArticle(
            id=f"uid_{u['id']}",
            title=u["full_name"],
            description=f"–¢–∏–∫: {u['tik']}",
            input_message_content=InputTextMessageContent(message_text=f"#UID{u['id']}"),
        )
        for u in users
    ]
    await iq.answer(results, cache_time=1)


# ---------- —à–∞–≥ 1: –≤—ã–±—Ä–∞–Ω–∞ —É—á–∞—Å—Ç–Ω–∏—Ü–∞, –æ—Ü–µ–Ω–∏–≤–∞–µ–º –ó–ö–ê -------------------------


@dp.message(PracticeFeedback.WaitingInline, F.text.startswith("#UID"), IsAdmin())
async def pfb_got_uid(msg: Message, state: FSMContext) -> None:
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —É—á–∞—Å—Ç–Ω–∏—Ü—É ‚Üí –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ó–ö–ê (1‚Äì3).

    callback-data —à–∫–∞–ª—ã: ``pfb_zka:{uid}:{value}``
    """
    try:
        uid = int(msg.text[4:])
    except ValueError:
        return

    card = get_participant_card(uid)
    if not card:
        return await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

    await state.update_data(user_id=uid)

    kb = scale_kb("pfb_zka", str(uid))
    text = build_admin_card_text(card) + "\n\n<b>–û—Ü–µ–Ω–∏—Ç–µ –ó–ö–ê (1‚Äì3):</b>"

    data = await state.get_data()
    prompt_id: Optional[int] = data.get("prompt_msg_id")
    photo_obj = get_photo_or_none(card)

    if photo_obj and prompt_id:
        await bot.edit_message_media(
            chat_id=msg.chat.id,
            message_id=prompt_id,
            media=InputMediaPhoto(media=photo_obj, caption=text, parse_mode="HTML"),
            reply_markup=kb,
        )
    elif prompt_id:
        await bot.edit_message_text(
            chat_id=msg.chat.id,
            message_id=prompt_id,
            text=text,
            parse_mode="HTML",
            reply_markup=kb,
        )
    else:
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        if photo_obj:
            await bot.send_photo(msg.chat.id, photo=photo_obj, caption=text, parse_mode="HTML", reply_markup=kb)
        else:
            await msg.answer(text, parse_mode="HTML", reply_markup=kb)

    await state.set_state(PracticeFeedback.WaitZka)
    await msg.delete()


# ---------- —à–∞–≥ 2: –ó–ö–ê ‚Üí –≤—ã–±–æ—Ä –ó–ö–û -----------------------------------------


@dp.callback_query(PracticeFeedback.WaitZka, F.data.startswith("pfb_zka:"), IsAdmin())
async def pfb_choose_zko(cb: CallbackQuery, state: FSMContext) -> None:
    """
    ``pfb_zka:{uid}:{zka}`` ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∫–∞–ª—É –ó–ö–û.
    """
    _, uid_str, zka_str = cb.data.split(":")
    uid, zka = int(uid_str), int(zka_str)
    await state.update_data(zka=zka)

    kb = scale_kb("pfb_zko", f"{uid}:{zka}")
    await cb.message.edit_text("<b>–û—Ü–µ–Ω–∏—Ç–µ –óKO (1‚Äì3):</b>", reply_markup=kb, parse_mode="HTML")
    await state.set_state(PracticeFeedback.WaitZko)
    await cb.answer()


# ---------- —à–∞–≥ 3: –ó–ö–û ‚Üí –≤–≤–æ–¥ SMART-feedback --------------------------------


@dp.callback_query(PracticeFeedback.WaitZko, F.data.startswith("pfb_zko:"), IsAdmin())
async def pfb_ask_feedback(cb: CallbackQuery, state: FSMContext) -> None:
    """
    ``pfb_zko:{uid}:{zka}:{zko}`` ‚Üí –ø—Ä–æ—Å–∏–º SMART-–æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.
    """
    _, uid_str, zka_str, zko_str = cb.data.split(":")
    uid, zka, zko = int(uid_str), int(zka_str), int(zko_str)
    await state.update_data(zko=zko)

    kb = back_from_fb_kb(f"{uid}:{zka}:{zko}")
    await cb.message.edit_text(
        "<b>–û—Å—Ç–∞–≤—å—Ç–µ SMART-–æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ–± —É—á–∞—Å—Ç–Ω–∏—Ü–µ:</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä: –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π, –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–π‚Ä¶",
        parse_mode="HTML",
        reply_markup=kb,
    )
    await state.set_state(PracticeFeedback.WaitFb)
    await cb.answer()


@dp.message(PracticeFeedback.WaitFb, F.text, IsAdmin())
async def pfb_save_feedback(msg: Message, state: FSMContext) -> None:
    """–ü–æ–ª—É—á–∞–µ–º SMART-feedback –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–ø—É—Å–∫–æ–≤."""
    fb_text = msg.text.strip()
    if len(fb_text) < 10:
        return await msg.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ, —É—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏.")

    await state.update_data(feedback=fb_text)
    data = await state.get_data()
    uid, zka, zko = data["user_id"], data["zka"], data["zko"]

    kb = absence_kb(f"{uid}:{zka}:{zko}")
    prompt_id: int = data["prompt_msg_id"]

    await bot.edit_message_text(
        chat_id=msg.chat.id,
        message_id=prompt_id,
        text="<b>–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –ø—Ä–∞–∫—Ç–∏–∫–∏:</b>",
        parse_mode="HTML",
        reply_markup=kb,
    )
    await state.set_state(PracticeFeedback.WaitAbsence)
    await msg.delete()


# ---------- —à–∞–≥ 4: –ø—Ä–æ–ø—É—Å–∫–∏ ‚Üí —Ñ–∏–Ω–∞–ª ----------------------------------------


@dp.callback_query(PracticeFeedback.WaitAbsence, F.data.startswith("pfb_abs:"), IsAdmin())
async def pfb_finalize(cb: CallbackQuery, state: FSMContext) -> None:
    """
    ``pfb_abs:{uid}:{zka}:{zko}:{absence}`` ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª.
    """
    *_, absence = cb.data.split(":")
    data = await state.get_data()
    data["absence"] = absence
    data["sup_id"] = cb.from_user.id

    save_practice_feedback(data)

    absence_human = (
        absence.replace(">4", "–±–æ–ª—å—à–µ 4")
        .replace("<4", "–º–µ–Ω—å—à–µ 4")
        .replace("minimum", "–ø–æ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ")
        .replace("0", "–Ω–µ—Ç")
    )

    report = (
        "üìã <b>–û–° –ø–æ —É—á–∞—Å—Ç–Ω–∏—Ü–µ</b>\n"
        f"ID: {data['user_id']}\n\n"
        f"–ó–ö–ê: {data['zka']}   |   –ó–ö–û: {data['zko']}\n"
        f"–ü—Ä–æ–ø—É—Å–∫–∏: {absence_human}\n\n"
        f"üìù <b>SMART-–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:</b>\n{escape(data.get('feedback', '‚Äî'))}\n\n"
        f"üë§ {html.quote(cb.from_user.full_name)}"
        f"{f' (@{cb.from_user.username})' if cb.from_user.username else ''}"
    )
    await bot.send_message(feedback_chat_id, report, parse_mode="HTML")

    await cb.message.edit_text("‚úÖ –û–° —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", reply_markup=back_menu_p_kb())
    await state.clear()
    await cb.answer()
