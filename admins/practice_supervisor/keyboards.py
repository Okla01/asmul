"""
Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–æ–¥—É–ª—è ¬´Practice Supervisor¬ª.
"""

from __future__ import annotations

from typing import Dict, List

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

FAQ_PER_PAGE: int = 7  # –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ


# --------------------------------------------------------------------------- #
#                                 1. FAQ                                      #
# --------------------------------------------------------------------------- #


def _build_faq_page_kb(faq: List[Dict], page: int) -> InlineKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã FAQ.

    *faq* ‚Äî —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π c ``id`` / ``question``.  
    *page* ‚Äî –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (0-based).
    """
    total_pages = max(1, (len(faq) - 1) // FAQ_PER_PAGE + 1)
    start, end = page * FAQ_PER_PAGE, (page + 1) * FAQ_PER_PAGE
    page_items = faq[start:end]

    kb = InlineKeyboardBuilder()

    # —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
    for item in page_items:
        kb.button(text=item["question"][:40], callback_data=f"pfaq_q:{item['id']}:{page}")
    kb.adjust(1)

    # –Ω–∞–≤–∏–≥–∞—Ü–∏—è ¬´‚óÄÔ∏è 1/10 ‚ñ∂Ô∏è¬ª
    if total_pages > 1:
        nav: list[InlineKeyboardButton] = []
        if page > 0:
            nav.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"pfaq_page:{page - 1}"))
        nav.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="noop"))
        if page < total_pages - 1:
            nav.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"pfaq_page:{page + 1}"))
        kb.row(*nav)

    # –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é
    kb.row(InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="p_menu"))
    return kb.as_markup()


# --------------------------------------------------------------------------- #
#                                 2. –ü—Ä–æ—á–µ–µ                                   #
# --------------------------------------------------------------------------- #


def back_to_menu_p_kb() -> InlineKeyboardMarkup:
    """–û–¥–Ω–æ–∫–Ω–æ–ø–æ—á–Ω–∞—è ¬´üè† –í –º–µ–Ω—é¬ª."""
    return InlineKeyboardBuilder().button(text="üè† –í –º–µ–Ω—é", callback_data="p_menu").as_markup()


def scale_kb(step: str, payload: str) -> InlineKeyboardMarkup:
    """
    –®–∫–∞–ª–∞ 1‚Äì3 –¥–ª—è –ó–ö–ê / –ó–ö–û.

    *step* ‚Äî –ø—Ä–µ—Ñ–∏–∫—Å callback (``pfb_zka`` –∏–ª–∏ ``pfb_zko``)  
    *payload* ‚Äî –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
    """
    kb = InlineKeyboardBuilder()
    for v in (1, 2, 3):
        kb.button(text=str(v), callback_data=f"{step}:{payload}:{v}")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"{step}_back:{payload}")
    return kb.adjust(3).as_markup()


def absence_kb(payload: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤."""
    kb = InlineKeyboardBuilder()
    kb.button(text="–ë–æ–ª–µ–µ 4 –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –º–µ—Å—è—Ü", callback_data=f"pfb_abs:{payload}:>4")
    kb.button(text="–ú–µ–Ω–µ–µ 4 –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –º–µ—Å—è—Ü", callback_data=f"pfb_abs:{payload}:<4")
    kb.button(text="–ü—Ä–æ–ø—É—Å–∫–∏ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ", callback_data=f"pfb_abs:{payload}:minimum")
    kb.button(text="–ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç", callback_data=f"pfb_abs:{payload}:0")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="pfb_back_zko")
    return kb.adjust(1).as_markup()


def back_from_fb_kb(payload: str) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ ¬´üîô –ù–∞–∑–∞–¥¬ª —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∫ –æ—Ü–µ–Ω–∫–µ –ó–ö–û."""
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"pfb_back_fb:{payload}")]]
    )


def back_menu_p_kb() -> InlineKeyboardMarkup:
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –û–°."""
    return InlineKeyboardBuilder().button(text="üè† –í –º–µ–Ω—é", callback_data="p_menu").as_markup()
